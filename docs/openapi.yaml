components:
    schemas:
        ErrorResponse:
            properties:
                error:
                    properties:
                        code:
                            description: A specific error code identifier (e.g., 'invalid_parameter_value', 'unauthorized')
                            type: string
                        message:
                            description: A human-readable error message
                            type: string
                        param:
                            description: The parameter that caused the error, if applicable
                            nullable: true
                            type: string
                        type:
                            description: The error type category (e.g., 'invalid_request_error', 'authentication_error')
                            type: string
                    required:
                        - message
                        - type
                        - code
                    type: object
            required:
                - error
            type: object
        accessservice_AccessEntryRequest:
            properties:
                createdAt:
                    format: date-time
                    type: string
                fileDetails:
                    type: object
                id:
                    type: string
                identity:
                    type: string
                identityDetails:
                    type: object
                permission:
                    type: string
                resource:
                    type: string
                resourceType:
                    type: string
                updatedAt:
                    format: date-time
                    type: string
                withUserDetails:
                    type: boolean
            required:
                - id
                - identity
                - resource
                - resourceType
                - permission
                - createdAt
                - updatedAt
            type: object
        activityservice_Alert:
            properties:
                Timestamp:
                    format: date-time
                    type: string
                id:
                    type: string
                message:
                    type: string
                metadata:
                    additionalProperties: true
                    type: object
                requestID:
                    type: string
            required:
                - id
                - message
                - requestID
                - metadata
                - Timestamp
            type: object
        array_activityservice_Alert:
            items:
                $ref: '#/components/schemas/activityservice_Alert'
            type: array
        array_backendapi_backendSummary:
            items:
                $ref: '#/components/schemas/backendapi_backendSummary'
            type: array
        array_chatservice_ChatMessage:
            items:
                $ref: '#/components/schemas/chatservice_ChatMessage'
            type: array
        array_chatservice_ChatSession:
            items:
                $ref: '#/components/schemas/chatservice_ChatSession'
            type: array
        array_downloadservice_Job:
            items:
                $ref: '#/components/schemas/downloadservice_Job'
            type: array
        array_eventstore_Event:
            items:
                $ref: '#/components/schemas/eventstore_Event'
            type: array
        array_eventstore_MappingConfig:
            items:
                $ref: '#/components/schemas/eventstore_MappingConfig'
            type: array
        array_eventstore_RawEvent:
            items:
                $ref: '#/components/schemas/eventstore_RawEvent'
            type: array
        array_filesapi_FileResponse:
            items:
                $ref: '#/components/schemas/filesapi_FileResponse'
            type: array
        array_functionstore_EventTrigger:
            items:
                $ref: '#/components/schemas/functionstore_EventTrigger'
            type: array
        array_functionstore_Function:
            items:
                $ref: '#/components/schemas/functionstore_Function'
            type: array
        array_runtimestate_ProviderConfig:
            items:
                $ref: '#/components/schemas/runtimestate_ProviderConfig'
            type: array
        array_runtimetypes_AffinityGroup:
            items:
                $ref: '#/components/schemas/runtimetypes_AffinityGroup'
            type: array
        array_runtimetypes_Backend:
            items:
                $ref: '#/components/schemas/runtimetypes_Backend'
            type: array
        array_runtimetypes_Model:
            items:
                $ref: '#/components/schemas/runtimetypes_Model'
            type: array
        array_runtimetypes_RemoteHook:
            items:
                $ref: '#/components/schemas/runtimetypes_RemoteHook'
            type: array
        array_statetype_BackendRuntimeState:
            items:
                $ref: '#/components/schemas/statetype_BackendRuntimeState'
            type: array
        array_string:
            items:
                type: string
            type: array
        array_taskengine_Operation:
            items:
                $ref: '#/components/schemas/taskengine_Operation'
            type: array
        array_taskengine_TaskChainDefinition:
            items:
                $ref: '#/components/schemas/taskengine_TaskChainDefinition'
            type: array
        backendapi_OpenAICompatibleModelList:
            properties:
                data:
                    items:
                        type: object
                    type: array
                object:
                    example: list
                    type: string
            required:
                - object
                - data
            type: object
        backendapi_backendDetails:
            properties:
                baseUrl:
                    example: http://ollama-prod.internal:11434
                    type: string
                createdAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
                error:
                    example: 'connection timeout: context deadline exceeded'
                    type: string
                id:
                    example: b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e
                    type: string
                models:
                    example: '[\"mistral:instruct\", \"llama2:7b\", \"nomic-embed-text:latest\"]'
                    items:
                        type: string
                    type: array
                name:
                    example: ollama-production
                    type: string
                pulledModels:
                    $ref: '#/components/schemas/statetype_ModelPullStatus'
                type:
                    example: ollama
                    type: string
                updatedAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
            required:
                - id
                - name
                - baseUrl
                - type
                - models
                - pulledModels
                - createdAt
                - updatedAt
            type: object
        backendapi_backendSummary:
            properties:
                baseUrl:
                    example: http://localhost:11434
                    type: string
                createdAt:
                    example: "2023-01-01T00:00:00Z"
                    format: date-time
                    type: string
                error:
                    example: error-message
                    type: string
                id:
                    example: backend-id
                    type: string
                models:
                    items:
                        type: string
                    type: array
                name:
                    example: backend-name
                    type: string
                pulledModels:
                    $ref: '#/components/schemas/statetype_ModelPullStatus'
                type:
                    example: ollama
                    type: string
                updatedAt:
                    example: "2023-01-01T00:00:00Z"
                    format: date-time
                    type: string
            required:
                - id
                - name
                - baseUrl
                - type
                - models
                - pulledModels
                - createdAt
                - updatedAt
            type: object
        chatservice_ChatMessage:
            properties:
                content:
                    description: message text
                    type: string
                id:
                    description: unique identifier
                    type: string
                isLatest:
                    description: mark if last message
                    type: boolean
                isUser:
                    description: derived from role
                    type: boolean
                role:
                    description: user/assistant/system
                    type: string
                sentAt:
                    description: timestamp
                    format: date-time
                    type: string
            required:
                - id
                - role
                - content
                - sentAt
                - isUser
                - isLatest
            type: object
        chatservice_ChatSession:
            properties:
                backendId:
                    type: string
                id:
                    type: string
                lastMessage:
                    type: object
                startedAt:
                    format: date-time
                    type: string
            required:
                - id
                - startedAt
                - backendId
            type: object
        dispatchapi_AssignRequest:
            properties:
                jobTypes:
                    items:
                        type: string
                    type: array
                leaseDuration:
                    type: string
                leaserId:
                    type: string
            required:
                - leaserId
                - leaseDuration
                - jobTypes
            type: object
        dispatchapi_JobUpdateRequest:
            properties:
                leaserId:
                    type: string
            required:
                - leaserId
            type: object
        downloadservice_Job:
            properties:
                createdAt:
                    example: "2021-09-01T00:00:00Z"
                    format: date-time
                    type: string
                id:
                    example: "1234567890"
                    type: string
                modelJob:
                    $ref: '#/components/schemas/runtimetypes_QueueItem'
                scheduledFor:
                    example: 1630483200
                    type: integer
                taskType:
                    example: model_download
                    type: string
                validUntil:
                    example: 1630483200
                    type: integer
            required:
                - id
                - taskType
                - modelJob
                - scheduledFor
                - validUntil
                - createdAt
            type: object
        eventstore_Event:
            properties:
                aggregate_id:
                    example: aggregate-uuid
                    type: string
                aggregate_type:
                    example: github.webhook
                    type: string
                created_at:
                    example: "2023-01-01T00:00:00Z"
                    format: date-time
                    type: string
                data:
                    description: JSON-encoded string
                    example: {}
                    format: json
                    type: string
                event_source:
                    example: github.com
                    type: string
                event_type:
                    example: github.pull_request
                    type: string
                id:
                    example: event-uuid
                    type: string
                metadata:
                    description: JSON-encoded string
                    example: {}
                    format: json
                    type: string
                nid:
                    example: 1
                    type: integer
                version:
                    example: 1
                    type: integer
            required:
                - id
                - nid
                - created_at
                - event_type
                - event_source
                - aggregate_id
                - aggregate_type
                - version
                - data
                - metadata
            type: object
        eventstore_MappingConfig:
            properties:
                aggregateIDField:
                    description: Extract aggregate ID from payload using JSON path or field name
                    type: string
                aggregateType:
                    type: string
                aggregateTypeField:
                    type: string
                eventIDField:
                    type: string
                eventSource:
                    type: string
                eventSourceField:
                    type: string
                eventType:
                    type: string
                eventTypeField:
                    type: string
                metadataMapping:
                    additionalProperties: true
                    description: Metadata fields to extract from headers/payload
                    type: object
                path:
                    type: string
                version:
                    description: Fixed version or field to extract from
                    type: integer
            required:
                - path
                - eventType
                - eventSource
                - aggregateType
                - aggregateIDField
                - aggregateTypeField
                - eventTypeField
                - eventSourceField
                - eventIDField
                - version
                - metadataMapping
            type: object
        eventstore_RawEvent:
            properties:
                headers:
                    additionalProperties: true
                    type: object
                id:
                    type: string
                nid:
                    type: integer
                path:
                    type: string
                payload:
                    additionalProperties: true
                    type: object
                received_at:
                    format: date-time
                    type: string
            required:
                - id
                - nid
                - received_at
                - path
                - payload
            type: object
        execapi_DefaultModelResponse:
            properties:
                modelName:
                    example: mistral:latest
                    type: string
            required:
                - modelName
            type: object
        execapi_EmbedRequest:
            properties:
                text:
                    example: Hello, world!
                    type: string
            required:
                - text
            type: object
        execapi_EmbedResponse:
            properties:
                vector:
                    example: '[0.1, 0.2, 0.3, ...]'
                    items:
                        type: number
                    type: array
            required:
                - vector
            type: object
        execapi_taskExecutionRequest:
            properties:
                chain:
                    $ref: '#/components/schemas/taskengine_TaskChainDefinition'
                input:
                    $ref: '#/components/schemas/object'
                inputType:
                    example: string
                    type: string
            required:
                - input
                - inputType
                - chain
            type: object
        execapi_taskExecutionResponse:
            properties:
                output:
                    $ref: '#/components/schemas/object'
                outputType:
                    example: string
                    type: string
                state:
                    $ref: '#/components/schemas/taskengine_CapturedStateUnit'
            required:
                - output
                - outputType
                - state
            type: object
        execservice_SimpleExecutionResponse:
            properties:
                id:
                    example: 123e4567-e89b-12d3-a456-426614174000
                    type: string
                response:
                    example: I'm doing well, thank you!
                    type: string
            required:
                - id
                - response
            type: object
        execservice_TaskRequest:
            properties:
                model_name:
                    example: gpt-3.5-turbo
                    type: string
                model_provider:
                    example: openai
                    type: string
                prompt:
                    example: Hello, how are you?
                    type: string
            required:
                - prompt
                - model_name
                - model_provider
            type: object
        filesapi_FileResponse:
            properties:
                contentType:
                    example: application/pdf
                    type: string
                createdAt:
                    example: "2024-06-01T12:00:00Z"
                    format: date-time
                    type: string
                id:
                    example: file_abc123
                    type: string
                name:
                    example: report.pdf
                    type: string
                path:
                    example: /documents/report.pdf
                    type: string
                size:
                    example: 102400
                    type: integer
                updatedAt:
                    example: "2024-06-01T12:00:00Z"
                    format: date-time
                    type: string
            required:
                - id
                - path
                - name
                - size
                - createdAt
                - updatedAt
            type: object
        filesapi_FolderResponse:
            properties:
                createdAt:
                    example: "2024-06-01T12:00:00Z"
                    format: date-time
                    type: string
                id:
                    example: folder_xyz789
                    type: string
                name:
                    example: projects
                    type: string
                parentId:
                    example: folder_root
                    type: string
                path:
                    example: /documents/projects
                    type: string
                updatedAt:
                    example: "2024-06-01T12:00:00Z"
                    format: date-time
                    type: string
            required:
                - id
                - path
                - name
                - createdAt
                - updatedAt
            type: object
        filesapi_folderCreateRequest:
            properties:
                name:
                    example: New Folder
                    type: string
                parentId:
                    example: folder_root
                    type: string
            required:
                - name
            type: object
        filesapi_moveRequest:
            properties:
                newParentId:
                    example: folder_abc123
                    type: string
            required:
                - newParentId
            type: object
        filesapi_nameUpdateRequest:
            properties:
                name:
                    example: new-name.txt
                    type: string
            required:
                - name
            type: object
        functionstore_EventTrigger:
            properties:
                createdAt:
                    description: Timestamps for creation and updates
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
                description:
                    description: A user-friendly description of what the trigger does.
                    example: Send a welcome email to a new user
                    type: string
                function:
                    description: The name of the function to execute when the event is received.
                    example: new_user_created_event_handler
                    type: string
                listenFor:
                    $ref: '#/components/schemas/functionstore_Listener'
                name:
                    description: A unique identifier for the trigger.
                    example: new_user_created
                    type: string
                type:
                    description: The type of the triggered action.
                    example: function
                    type: string
                updatedAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
            required:
                - name
                - description
                - listenFor
                - type
                - function
                - createdAt
                - updatedAt
            type: object
        functionstore_Function:
            properties:
                createdAt:
                    description: Timestamps for creation and updates
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
                description:
                    description: A user-friendly description of what the function does.
                    type: string
                name:
                    description: A unique identifier for the function.
                    example: send_welcome_email_event_handler
                    type: string
                script:
                    description: The script code itself.
                    type: string
                scriptType:
                    description: The type of script to execute.
                    example: goja
                    type: string
                updatedAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
            required:
                - name
                - description
                - scriptType
                - script
                - createdAt
                - updatedAt
            type: object
        functionstore_Listener:
            properties:
                type:
                    description: The event type to listen for.
                    example: contenox.user_created
                    type: string
            required:
                - type
            type: object
        indexservice_IndexRequest:
            properties:
                chunks:
                    items:
                        type: string
                    type: array
                id:
                    type: string
                jobId:
                    type: string
                leaserId:
                    type: string
                replace:
                    type: boolean
            required:
                - chunks
                - id
                - replace
                - jobId
                - leaserId
            type: object
        indexservice_IndexResponse:
            properties:
                augmentedMetadata:
                    items:
                        type: string
                    type: array
                id:
                    type: string
                vectors:
                    items:
                        type: string
                    type: array
            required:
                - id
                - vectors
                - augmentedMetadata
            type: object
        indexservice_SearchResponse:
            properties:
                results:
                    items:
                        type: object
                    type: array
                triedQuery:
                    items:
                        type: string
                    type: array
            required:
                - results
                - triedQuery
            type: object
        runtimestate_ProviderConfig:
            properties:
                APIKey:
                    type: string
                Type:
                    type: string
            required:
                - APIKey
                - Type
            type: object
        runtimetypes_AffinityGroup:
            properties:
                createdAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
                id:
                    example: p9a8b7c6-d5e4-f3a2-b1c0-d9e8f7a6b5c4
                    type: string
                name:
                    example: production-chat
                    type: string
                purposeType:
                    example: Internal Tasks
                    type: string
                updatedAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
            required:
                - id
                - name
                - purposeType
                - createdAt
                - updatedAt
            type: object
        runtimetypes_Backend:
            properties:
                baseUrl:
                    example: http://ollama-prod.internal:11434
                    type: string
                createdAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
                id:
                    example: b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e
                    type: string
                name:
                    example: ollama-production
                    type: string
                type:
                    example: ollama
                    type: string
                updatedAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
            required:
                - id
                - name
                - baseUrl
                - type
                - createdAt
                - updatedAt
            type: object
        runtimetypes_InjectionArg:
            properties:
                in:
                    example: body
                    type: string
                name:
                    example: access_token
                    type: string
                value:
                    $ref: '#/components/schemas/runtimetypes_any'
            required:
                - name
                - value
                - in
            type: object
        runtimetypes_Model:
            properties:
                canChat:
                    example: true
                    type: boolean
                canEmbed:
                    example: false
                    type: boolean
                canPrompt:
                    example: true
                    type: boolean
                canStream:
                    example: true
                    type: boolean
                contextLength:
                    example: 8192
                    type: integer
                createdAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
                id:
                    example: m7d8e9f0a-1b2c-3d4e-5f6a-7b8c9d0e1f2a
                    type: string
                model:
                    example: mistral:instruct
                    type: string
                updatedAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
            required:
                - id
                - model
                - contextLength
                - canChat
                - canEmbed
                - canPrompt
                - canStream
                - createdAt
                - updatedAt
            type: object
        runtimetypes_QueueItem:
            properties:
                model:
                    example: llama2:latest
                    type: string
                url:
                    example: http://ollama-prod.internal:11434
                    type: string
            required:
                - url
                - model
            type: object
        runtimetypes_RemoteHook:
            properties:
                createdAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
                endpointUrl:
                    example: http://hooks-endpoint:port
                    type: string
                headers:
                    additionalProperties: true
                    example: Authorization:Bearer token,Content-Type:application/json
                    type: object
                id:
                    example: h1a2b3c4-d5e6-f7g8-h9i0-j1k2l3m4n5o6
                    type: string
                name:
                    example: mailing-tools
                    type: string
                properties:
                    $ref: '#/components/schemas/runtimetypes_InjectionArg'
                timeoutMs:
                    example: 5000
                    type: integer
                updatedAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
            required:
                - id
                - name
                - endpointUrl
                - timeoutMs
                - properties
                - createdAt
                - updatedAt
            type: object
        statetype_BackendRuntimeState:
            properties:
                backend:
                    $ref: '#/components/schemas/runtimetypes_Backend'
                error:
                    description: |-
                        Error stores a description of the last encountered error when
                        interacting with or reconciling this backend's state, if any.
                    example: 'connection timeout: context deadline exceeded'
                    type: string
                id:
                    example: b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e
                    type: string
                models:
                    example: '[\"mistral:instruct\", \"llama2:7b\", \"nomic-embed-text:latest\"]'
                    items:
                        type: string
                    type: array
                name:
                    example: ollama-production
                    type: string
                pulledModels:
                    $ref: '#/components/schemas/statetype_ModelPullStatus'
            required:
                - id
                - name
                - models
                - pulledModels
                - backend
            type: object
        statetype_ModelDetails:
            properties:
                families:
                    example: '[\"Mistral\", \"7B\"]'
                    items:
                        type: string
                    type: array
                family:
                    example: Mistral
                    type: string
                format:
                    example: gguf
                    type: string
                parameterSize:
                    example: 7B
                    type: string
                parentModel:
                    example: mistral:7b
                    type: string
                quantizationLevel:
                    example: Q4_K_M
                    type: string
            required:
                - parentModel
                - format
                - family
                - families
                - parameterSize
                - quantizationLevel
            type: object
        statetype_ModelPullStatus:
            properties:
                canChat:
                    example: true
                    type: boolean
                canEmbed:
                    example: false
                    type: boolean
                canPrompt:
                    example: true
                    type: boolean
                canStream:
                    example: true
                    type: boolean
                contextLength:
                    example: 4096
                    type: integer
                details:
                    $ref: '#/components/schemas/statetype_ModelDetails'
                digest:
                    example: sha256:9e3a6c0d3b5e7f8a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a
                    type: string
                model:
                    example: mistral:instruct
                    type: string
                modifiedAt:
                    example: "2023-11-15T14:30:45Z"
                    format: date-time
                    type: string
                name:
                    example: Mistral 7B Instruct
                    type: string
                size:
                    example: 4709611008
                    type: integer
            required:
                - name
                - model
                - modifiedAt
                - size
                - digest
                - details
                - contextLength
                - canChat
                - canEmbed
                - canPrompt
                - canStream
            type: object
        taskengine_CapturedStateUnit:
            properties:
                duration:
                    description: in nanoseconds
                    example: 4.52e+08
                    format: nanoseconds
                    type: integer
                error:
                    $ref: '#/components/schemas/taskengine_ErrorResponse'
                input:
                    example: This is a test input that needs validation
                    type: string
                inputType:
                    example: string
                    type: string
                inputVar:
                    description: Which variable was used as input
                    example: input
                    type: string
                output:
                    example: valid
                    type: string
                outputType:
                    example: string
                    type: string
                taskHandler:
                    example: condition_key
                    type: string
                taskID:
                    example: validate_input
                    type: string
                transition:
                    example: valid_input
                    type: string
            required:
                - taskID
                - taskHandler
                - inputType
                - outputType
                - transition
                - duration
                - error
                - input
                - output
                - inputVar
            type: object
        taskengine_ComposeTask:
            properties:
                strategy:
                    description: |-
                        Strategy defines how values should be merged ("override", "merge_chat_histories", "append_string_to_chat_history").
                        Optional; defaults to "override" or "merge_chat_histories" if both output and WithVar values are ChatHistory.
                        "merge_chat_histories": If both output and WithVar values are ChatHistory,
                        appends the WithVar's Messages to the output's Messages.
                    type: string
                with_var:
                    description: Selects the variable to compose the current input with.
                    type: string
            type: object
        taskengine_ErrorResponse:
            properties:
                error:
                    example: 'validation failed: input contains prohibited content'
                    type: string
            required:
                - error
            type: object
        taskengine_HookCall:
            properties:
                args:
                    additionalProperties: true
                    description: |-
                        Args are key-value pairs to parameterize the hook call.
                        Example: {"to": "user@example.com", "subject": "Notification"}
                    example: '{\"channel\": \"#alerts\", \"message\": \"Task completed successfully\"}'
                    type: object
                name:
                    description: Name is the registered hook-service (e.g., "send_email").
                    example: slack
                    type: string
                tool_name:
                    description: ToolName is the name of the tool to invoke (e.g., "send_slack_notification").
                    example: send_slack_notification
                    type: string
            required:
                - name
                - tool_name
                - args
            type: object
        taskengine_LLMExecutionConfig:
            properties:
                hide_tools:
                    example: '[\"tool1\", \"hook_name1.tool1\"]'
                    items:
                        type: string
                    type: array
                hooks:
                    example: '[\"slack_notification\", \"email_notification\"]'
                    items:
                        type: string
                    type: array
                model:
                    example: mistral:instruct
                    type: string
                models:
                    example: '[\"gpt-4\", \"gpt-3.5-turbo\"]'
                    items:
                        type: string
                    type: array
                pass_clients_tools:
                    type: boolean
                provider:
                    example: ollama
                    type: string
                providers:
                    example: '[\"ollama\", \"openai\"]'
                    items:
                        type: string
                    type: array
                temperature:
                    example: 0.7
                    type: number
            required:
                - model
                - pass_clients_tools
            type: object
        taskengine_OpenAIChatRequest:
            properties:
                frequency_penalty:
                    example: 0
                    type: number
                max_tokens:
                    example: 512
                    type: integer
                messages:
                    $ref: '#/components/schemas/taskengine_OpenAIChatRequestMessage'
                model:
                    example: mistral:instruct
                    type: string
                "n":
                    example: 1
                    type: integer
                presence_penalty:
                    example: 0
                    type: number
                stop:
                    example: '[\"\\n\", \"###\"]'
                    items:
                        type: string
                    type: array
                stream:
                    example: false
                    type: boolean
                temperature:
                    example: 0.7
                    type: number
                tool_choice:
                    description: 'Can be "none", "auto", or {"type": "function", "function": {"name": "my_function"}}'
                tools:
                    items:
                        type: object
                    type: array
                top_p:
                    example: 1
                    type: number
                user:
                    example: user_123
                    type: string
            required:
                - model
                - messages
            type: object
        taskengine_OpenAIChatRequestMessage:
            properties:
                content:
                    example: Hello, how are you?
                    type: string
                role:
                    example: user
                    type: string
            required:
                - role
                - content
            type: object
        taskengine_Operation:
            properties:
                operation:
                    type: string
                subject:
                    type: string
            required:
                - operation
                - subject
            type: object
        taskengine_TaskChainDefinition:
            properties:
                debug:
                    description: Enables capturing user input and output.
                    type: boolean
                description:
                    description: Description provides a human-readable summary of the chain's purpose.
                    type: string
                id:
                    description: ID uniquely identifies the chain.
                    type: string
                tasks:
                    $ref: '#/components/schemas/taskengine_TaskDefinition'
                token_limit:
                    description: TokenLimit is the token limit for the context window (used during execution).
                    type: integer
            required:
                - id
                - debug
                - description
                - tasks
                - token_limit
            type: object
        taskengine_TaskDefinition:
            properties:
                compose:
                    $ref: '#/components/schemas/taskengine_ComposeTask'
                description:
                    description: Description is a human-readable summary of what the task does.
                    example: Validates user input meets quality requirements
                    type: string
                execute_config:
                    $ref: '#/components/schemas/taskengine_LLMExecutionConfig'
                handler:
                    description: Handler determines how the LLM output (or hook) will be interpreted.
                    example: condition_key
                    type: string
                hook:
                    $ref: '#/components/schemas/taskengine_HookCall'
                id:
                    description: ID uniquely identifies the task within the chain.
                    example: validate_input
                    type: string
                input_var:
                    description: |-
                        InputVar is the name of the variable to use as input for the task.
                        Example: "input" for the original input.
                        Each task stores its output in a variable named with it's task id.
                    example: input
                    type: string
                output_template:
                    description: |-
                        OutputTemplate is an optional go template to format the output of a hook.
                        If specified, the hook's JSON output will be used as data for the template.
                        The final output of the task will be the rendered string.
                        Example: "The weather is {{.weather}} with a temperature of {{.temperature}}."
                    example: 'Hook result: {{.status}}'
                    type: string
                print:
                    description: |-
                        Print optionally formats the output for display/logging.
                        Supports template variables from previous task outputs.
                        Optional for all task types except Hook where it's rarely used.
                        Example: "The score is: {{.previous_output}}"
                    example: 'Validation result: {{.validate_input}}'
                    type: string
                prompt_template:
                    description: |-
                        PromptTemplate is the text prompt sent to the LLM.
                        It's Required and only applicable for the raw_string type.
                        Supports template variables from previous task outputs.
                        Example: "Rate the quality from 1-10: {{.input}}"
                    example: Is this input valid? {{.input}}
                    type: string
                retry_on_failure:
                    description: |-
                        RetryOnFailure sets how many times to retry this task on failure.
                        Applies to all task types including Hooks.
                        Default: 0 (no retries)
                    example: 2
                    type: integer
                system_instruction:
                    description: SystemInstruction provides additional instructions to the LLM, if applicable system level will be used.
                    example: You are a quality control assistant. Respond only with 'valid' or 'invalid'.
                    type: string
                timeout:
                    description: |-
                        Timeout optionally sets a timeout for task execution.
                        Format: "10s", "2m", "1h" etc.
                        Optional for all task types.
                    example: 30s
                    type: string
                transition:
                    $ref: '#/components/schemas/taskengine_TaskTransition'
                valid_conditions:
                    additionalProperties: true
                    description: |-
                        ValidConditions defines allowed values for ConditionKey tasks.
                        Required for ConditionKey tasks, ignored for all other types.
                        Example: {"yes": true, "no": true} for a yes/no condition.
                    example: '{\"valid\": true, \"invalid\": true}'
                    type: object
            required:
                - id
                - description
                - handler
                - prompt_template
                - transition
            type: object
        taskengine_TaskTransition:
            properties:
                branches:
                    $ref: '#/components/schemas/taskengine_TransitionBranch'
                on_failure:
                    description: OnFailure is the task ID to jump to in case of failure.
                    example: error_handler
                    type: string
            required:
                - on_failure
                - branches
            type: object
        taskengine_TransitionBranch:
            properties:
                goto:
                    description: |-
                        Goto specifies the target task ID if this branch is taken.
                        Leave empty or use taskengine.TermEnd to end the chain.
                    example: positive_response
                    type: string
                operator:
                    description: Operator defines how to compare the task's output to When.
                    example: equals
                    type: string
                when:
                    description: |-
                        When specifies the condition that must be met to follow this branch.
                        Format depends on the task type:
                        - For condition_key: exact string match
                        - For parse_number: numeric comparison (using Operator)
                    example: "yes"
                    type: string
            required:
                - when
                - goto
            type: object
        usersapi_tokenRefreshRequest:
            properties:
                token:
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    type: string
            required:
                - token
            type: object
        usersapi_tokenRefreshResponse:
            properties:
                token:
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    type: string
            required:
                - token
            type: object
        userservice_CreateUserRequest:
            properties:
                allowedResources:
                    items:
                        type: object
                    type: array
                email:
                    type: string
                friendlyName:
                    type: string
                password:
                    type: string
            required:
                - email
                - password
                - allowedResources
            type: object
        userservice_UpdateUserRequest:
            properties:
                email:
                    type: string
                friendlyName:
                    type: string
                password:
                    type: string
            required:
                - password
            type: object
    securitySchemes:
        X-API-Key:
            in: header
            name: X-API-Key
            type: apiKey
info:
    title: contenox/runtime – LLM Backend Management API
    version: v0.0.51-184-gc4b57fb-dirty
openapi: 3.1.0
paths:
    /access-control:
        get:
            description: |-
                Lists access control entries with optional filtering and pagination.
                Use 'identity' to filter by user/service.
                Use 'expand=user' to include full user details.
                Use 'from' (RFC3339) for pagination cursor.
            parameters:
                - description: Filter by identity (user or service ID).
                  in: query
                  name: identity
                  schema:
                    type: string
                - description: Expand related resources (e.g., 'user').
                  in: query
                  name: expand
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_usersapi_accessEntryResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists access control entries with optional filtering and pagination.
        post:
            description: |-
                Creates a new access control entry.
                Grants a permission level to an identity (user or service) on a specific resource.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/accessservice_AccessEntryRequest'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_accessEntryResponse'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new access control entry.
    /access-control/{id}:
        delete:
            description: |-
                Deletes an access control entry.
                Revokes the specified permission immediately.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes an access control entry.
        get:
            description: |-
                Retrieves an access control entry by its unique ID.
                Use 'expand=user' to include full user details.
            parameters:
                - description: Expand related resources (e.g., 'user').
                  in: query
                  name: expand
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_accessEntryResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves an access control entry by its unique ID.
        parameters:
            - description: The unique identifier of the access control entry.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing access control entry.
                The ID from the URL path overrides any ID in the request body.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/accessservice_AccessEntryRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_accessEntryResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing access control entry.
    /activity/alerts:
        get:
            description: |-
                Lists recent alerts with optional limit.
                Use 'limit' to control the number of alerts returned (default: 99).
            parameters:
                - description: Maximum number of alerts to return.
                  in: query
                  name: limit
                  schema:
                    default: "99"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_activityservice_Alert'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists recent alerts with optional limit.
    /activity/logs:
        get:
            description: |-
                Lists recent activity logs with optional limit.
                Use 'limit' to control the number of logs returned (default: 100).
            parameters:
                - description: Maximum number of logs to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_activityservice_ActivityLog'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists recent activity logs with optional limit.
    /activity/operations:
        get:
            description: |-
                Lists all known operation types in the system.
                Useful for filtering and discovery of available operations.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_taskengine_Operation'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all known operation types in the system.
    /activity/operations/{op}/{subject}:
        get:
            description: |-
                Lists requests by operation type and subject.
                Useful for finding all requests of a specific operation type.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists requests by operation type and subject.
        parameters:
            - description: The operation type.
              in: path
              name: op
              required: true
              schema:
                type: string
            - description: The operation subject.
              in: path
              name: subject
              required: true
              schema:
                type: string
    /activity/requests:
        get:
            description: |-
                Lists recent activity requests with optional limit.
                Use 'limit' to control the number of requests returned (default: 100).
            parameters:
                - description: Maximum number of requests to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_activityservice_ActivityRequest'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists recent activity requests with optional limit.
    /activity/requests/{id}:
        get:
            description: |-
                Retrieves a specific activity request by its ID.
                Returns all events associated with the request.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_activityservice_RequestEvent'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves a specific activity request by its ID.
        parameters:
            - description: The unique identifier of the activity request.
              in: path
              name: id
              required: true
              schema:
                type: string
    /activity/requests/{id}/state:
        get:
            description: |-
                Retrieves the execution state of a specific request.
                Returns the current state and progress information for long-running operations.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/activityservice_ExecutionState'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves the execution state of a specific request.
        parameters:
            - description: The unique identifier of the activity request.
              in: path
              name: id
              required: true
              schema:
                type: string
    /activity/stateful-requests:
        get:
            description: |-
                Lists all stateful requests currently being tracked.
                Stateful requests are long-running operations that maintain execution state.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all stateful requests currently being tracked.
    /backend-affinity/{backendID}/groups:
        get:
            description: |-
                Lists all affinity groups that a specific backend belongs to.
                Useful for understanding which model sets a backend has access to.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimetypes_AffinityGroup'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all affinity groups that a specific backend belongs to.
        parameters:
            - description: The unique identifier of the backend.
              in: path
              name: backendID
              required: true
              schema:
                type: string
    /backend-affinity/{groupID}/backends:
        get:
            description: |-
                Lists all backends associated with a specific affinity group.
                Returns basic backend information without runtime state.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimetypes_Backend'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all backends associated with a specific affinity group.
        parameters:
            - description: The unique identifier of the affinity group.
              in: path
              name: groupID
              required: true
              schema:
                type: string
    /backend-affinity/{groupID}/backends/{backendID}:
        delete:
            description: |-
                Removes a backend from an affinity group.
                After removal, the backend will no longer be eligible to process requests for models in this affinity group.
                Requests requiring models from this affinity group will no longer be routed to this backend.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Removes a backend from an affinity group.
        parameters:
            - description: The unique identifier of the affinity group.
              in: path
              name: groupID
              required: true
              schema:
                type: string
            - description: The unique identifier of the backend to be assigned.
              in: path
              name: backendID
              required: true
              schema:
                type: string
        post:
            description: |-
                Associates a backend with an affinity group.
                After assignment, the backend can process requests for all models in the affinity group.
                This enables request routing between the backend and models that share this affinity group.
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Associates a backend with an affinity group.
    /backends:
        get:
            description: |-
                Lists all configured backend connections with runtime status.
                NOTE: Only backends assigned to at least one group will be used for request processing.
                Backends not assigned to any group exist in the configuration but are completely ignored by the routing system.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_backendapi_backendSummary'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all configured backend connections with runtime status.
        post:
            description: |-
                Creates a new backend connection to an LLM provider.
                Backends represent connections to LLM services (e.g., Ollama, OpenAI) that can host models.
                Note: Creating a backend will be provisioned on the next synchronization cycle.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/runtimetypes_Backend'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_Backend'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new backend connection to an LLM provider.
    /backends/{id}:
        delete:
            description: |-
                Removes a backend connection.
                This does not deleteBackend models from the remote provider, only removes the connection.
                Returns a simple "backend removed" confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Removes a backend connection.
        get:
            description: Retrieves complete information for a specific backend
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/backendapi_backendDetails'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves complete information for a specific backend
        parameters:
            - description: The unique identifier for the backend.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing backend configuration.
                The ID from the URL path overrides any ID in the request body.
                Note: Updating a backend will be provisioned on the next synchronization cycle.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/runtimetypes_Backend'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_Backend'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing backend configuration.
    /bots:
        get:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/bots'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: list
        post:
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/bot'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: create
    /bots/{id}:
        delete:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/object'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: delete
        get:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/bot'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: get
        parameters:
            - in: path
              name: id
              required: true
              schema:
                type: string
        put:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/bot'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: update
    /chats:
        get:
            description: |-
                Lists all available chat sessions.
                Returns basic information about each chat session in the system.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_chatservice_ChatSession'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all available chat sessions.
        post:
            description: |-
                Creates a new chat instance for the specified subject.
                Returns the unique identifier for the new chat session.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/chatapi_newChatInstanceRequest'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/map[string]string'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new chat instance for the specified subject.
    /chats/{id}:
        get:
            description: |-
                Retrieves the complete chat history for a session.
                Returns all messages and interactions in chronological order.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_chatservice_ChatMessage'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves the complete chat history for a session.
        parameters:
            - description: The unique identifier of the chat session.
              in: path
              name: id
              required: true
              schema:
                type: string
    /chats/{id}/chat:
        parameters:
            - description: The unique identifier of the chat session.
              in: path
              name: id
              required: true
              schema:
                type: string
        post:
            description: |-
                Sends a message to a chat session and gets AI response.
                Supports multiple AI models and providers with token counting and state capture.
            parameters:
                - description: The ID of the taskchain to be used to compute the response.
                  in: query
                  name: chainId
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/chatapi_chatRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/map[string]any'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Sends a message to a chat session and gets AI response.
    /chats/{id}/instruction:
        parameters:
            - description: The unique identifier of the chat session.
              in: path
              name: id
              required: true
              schema:
                type: string
        post:
            description: |-
                Adds an instruction to an existing chat session.
                Instructions guide the AI behavior for subsequent interactions.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/chatapi_instructionRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/map[string]string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Adds an instruction to an existing chat session.
    /defaultmodel:
        get:
            description: Returns the default model configured during system initialization.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/execapi_DefaultModelResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Returns the default model configured during system initialization.
    /embed:
        post:
            description: |-
                Generates vector embeddings for text.
                Uses the system's default embedding model configured at startup.
                Requests are routed ONLY to backends that have the default model available in any shared group.
                If groups are enabled, models and backends not assigned to any group will be completely ignored by the routing system.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/execapi_EmbedRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/execapi_EmbedResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Generates vector embeddings for text.
    /event-triggers:
        get:
            description: |-
                Lists all event triggers with pagination
                Returns event triggers in creation order, with the oldest triggers first.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_functionstore_EventTrigger'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all event triggers with pagination
        post:
            description: |-
                Creates a new event trigger
                Event triggers listen for specific events and execute associated functions.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/functionstore_EventTrigger'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/functionstore_EventTrigger'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new event trigger
    /event-triggers/{name}:
        delete:
            description: |-
                Deletes an event trigger from the system
                Returns a simple confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes an event trigger from the system
        get:
            description: Retrieves details for a specific event trigger
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/functionstore_EventTrigger'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves details for a specific event trigger
        parameters:
            - description: The unique name of the event trigger.
              in: path
              name: name
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing event trigger configuration
                The name from the URL path overrides any name in the request body.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/functionstore_EventTrigger'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/functionstore_EventTrigger'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing event trigger configuration
    /event-triggers/event-type/{eventType}:
        get:
            description: |-
                Lists event triggers filtered by event type
                Returns all event triggers that listen for the specified event type.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_functionstore_EventTrigger'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists event triggers filtered by event type
        parameters:
            - description: The event type to filter by.
              in: path
              name: eventType
              required: true
              schema:
                type: string
    /event-triggers/function/{functionName}:
        get:
            description: |-
                Lists event triggers filtered by function name
                Returns all event triggers that execute the specified function.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_functionstore_EventTrigger'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists event triggers filtered by function name
        parameters:
            - description: The function name to filter by.
              in: path
              name: functionName
              required: true
              schema:
                type: string
    /events:
        post:
            description: |-
                Appends a new event to the event store.
                The event ID and CreatedAt will be auto-generated if not provided.
                Events must be within ±10 minutes of current server time.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/eventstore_Event'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/eventstore_Event'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Appends a new event to the event store.
    /events/aggregate:
        get:
            description: |-
                Retrieves events for a specific aggregate within a time range.
                Useful for rebuilding aggregate state or auditing changes.
            parameters:
                - description: The aggregate type (e.g., 'user', 'order').
                  in: query
                  name: aggregate_type
                  schema:
                    type: string
                - description: The unique ID of the aggregate.
                  in: query
                  name: aggregate_id
                  schema:
                    type: string
                - description: Maximum number of events to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: The type of event to filter by.
                  in: query
                  name: event_type
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_eventstore_Event'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves events for a specific aggregate within a time range.
    /events/source:
        get:
            description: |-
                Retrieves events from a specific source within a time range.
                Useful for auditing or monitoring events from specific subsystems.
            parameters:
                - description: Maximum number of events to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: The type of event to filter by.
                  in: query
                  name: event_type
                  schema:
                    type: string
                - description: The source system that generated the event.
                  in: query
                  name: event_source
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_eventstore_Event'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves events from a specific source within a time range.
    /events/stream/{eventType}:
        get:
            description: |-
                Streams events of a specific type in real-time using Server-Sent Events (SSE)
                This endpoint provides real-time event streaming for the specified event type.
                Clients will receive new events as they are appended to the event store.
                --- SSE Streaming ---
                The endpoint streams events using Server-Sent Events (SSE) format.
                Each event is sent as a JSON object in the data field.
                Example event stream:
                data: {"id":"evt_123","event_type":"user_created","aggregate_type":"user","aggregate_id":"usr_456","version":1,"data":{"name":"John Doe"},"created_at":"2023-01-01T00:00:00Z"}
                data: {"id":"evt_124","event_type":"user_updated","aggregate_type":"user","aggregate_id":"usr_456","version":2,"data":{"name":"Jane Doe"},"created_at":"2023-01-01T00:01:00Z"}
            responses:
                "200":
                    content:
                        text/event-stream:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Streams events of a specific type in real-time using Server-Sent Events (SSE)
        parameters:
            - description: The type of events to stream.
              in: path
              name: eventType
              required: true
              schema:
                type: string
    /events/type:
        delete:
            description: |-
                Deletes all events of a specific type within a time range.
                USE WITH CAUTION — this is a destructive operation.
                Typically used for GDPR compliance or cleaning up test data.
            parameters:
                - description: The type of event to delete.
                  in: query
                  name: event_type
                  schema:
                    type: string
                - description: Start time in RFC3339 format.
                  in: query
                  name: from
                  schema:
                    type: string
                - description: End time in RFC3339 format.
                  in: query
                  name: to
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes all events of a specific type within a time range.
        get:
            description: |-
                Retrieves events of a specific type within a time range.
                Useful for cross-aggregate analysis or system-wide event monitoring.
            parameters:
                - description: The type of event to filter by.
                  in: query
                  name: event_type
                  schema:
                    type: string
                - description: Maximum number of events to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_eventstore_Event'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves events of a specific type within a time range.
    /events/types:
        get:
            description: |-
                Lists distinct event types that occurred within a time range.
                Useful for discovery or building event type filters in UIs.
            parameters:
                - description: Maximum number of event types to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists distinct event types that occurred within a time range.
    /execute:
        post:
            description: |-
                Runs the prompt through the default LLM.
                This endpoint provides basic chat completion optimized for machine-to-machine (M2M) communication.
                Requests are routed ONLY to backends that have the default model available in any shared group.
                If groups are enabled, models and backends not assigned to any group will be completely ignored by the routing system.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/execservice_TaskRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/execservice_SimpleExecutionResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Runs the prompt through the default LLM.
    /executor/sync:
        post:
            description: Implement the handler method
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Implement the handler method
    /files:
        get:
            description: |-
                Lists files and folders, optionally filtered by path.
                Use the 'path' query parameter to list contents of a specific directory.
            parameters:
                - description: Filter results by file path prefix.
                  in: query
                  name: path
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_filesapi_FileResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists files and folders, optionally filtered by path.
        post:
            description: |-
                Creates a new file by uploading binary content via multipart/form-data.
                The 'file' field is required. Optional 'name' and 'parentid' fields control naming and placement.
                Files are limited to 100 MiB (configurable via fileservice.MaxUploadSize).
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/filesapi_FileResponse'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new file by uploading binary content via multipart/form-data.
    /files/{id}:
        delete:
            description: |-
                Deletes a file from the system.
                Returns a confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/map[string]string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes a file from the system.
        get:
            description: |-
                Retrieves metadata for a specific file.
                Returns 404 if the file does not exist.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/filesapi_FileResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves metadata for a specific file.
        parameters:
            - description: The unique identifier of the file.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing file's content via multipart/form-data.
                Replaces the entire file content. The file ID is taken from the URL path.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/filesapi_FileResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing file's content via multipart/form-data.
    /files/{id}/download:
        get:
            description: |-
                Downloads the raw content of a file.
                The 'skip' query parameter (if "true") omits the Content-Disposition header.
            parameters:
                - description: If 'true', skips Content-Disposition header.
                  in: query
                  name: skip
                  schema:
                    default: "false"
                    type: string
            responses:
                "200":
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Downloads the raw content of a file.
        parameters:
            - description: The unique identifier of the file.
              in: path
              name: id
              required: true
              schema:
                type: string
    /files/{id}/move:
        parameters:
            - description: The unique identifier of the file.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Moves a file to a new parent folder.
                Accepts a JSON body with 'newParentId'.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/filesapi_moveRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/filesapi_FileResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Moves a file to a new parent folder.
    /files/{id}/name:
        parameters:
            - description: The unique identifier of the file.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Renames a file.
                Accepts a JSON body with the new 'name'.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/filesapi_nameUpdateRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/filesapi_FileResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Renames a file.
    /folders:
        post:
            description: |-
                Creates a new folder.
                Requires a 'name'. Optionally accepts 'parentId' to place it inside another folder.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/filesapi_folderCreateRequest'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/filesapi_FolderResponse'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new folder.
    /folders/{id}:
        delete:
            description: |-
                Deletes a folder and all its contents.
                Returns a confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/map[string]string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes a folder and all its contents.
        parameters:
            - description: The unique identifier of the folder.
              in: path
              name: id
              required: true
              schema:
                type: string
    /folders/{id}/move:
        parameters:
            - description: The unique identifier of the folder.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Moves a folder to a new parent folder.
                Accepts a JSON body with 'newParentId'.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/filesapi_moveRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/filesapi_FolderResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Moves a folder to a new parent folder.
    /folders/{id}/name:
        parameters:
            - description: The unique identifier of the folder.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Renames a folder.
                Accepts a JSON body with the new 'name'.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/filesapi_nameUpdateRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/filesapi_FolderResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Renames a folder.
    /functions:
        get:
            description: |-
                Lists all registered functions with pagination
                Returns functions in creation order, with the oldest functions first.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_functionstore_Function'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all registered functions with pagination
        post:
            description: |-
                Creates a new serverless function
                Functions contain executable JavaScript code that runs in a secure sandbox.
                After execution, functions can trigger chains for further processing.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/functionstore_Function'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/functionstore_Function'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new serverless function
    /functions/{name}:
        delete:
            description: |-
                Deletes a function from the system
                Returns a simple confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes a function from the system
        get:
            description: Retrieves details for a specific function
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/functionstore_Function'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves details for a specific function
        parameters:
            - description: The unique name of the function.
              in: path
              name: name
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing function configuration
                The name from the URL path overrides any name in the request body.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/functionstore_Function'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/functionstore_Function'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing function configuration
    /group-by-name/{name}:
        get:
            description: |-
                Retrieves an affinity group by its human-readable name.
                Useful for configuration where ID might not be known but name is consistent.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_AffinityGroup'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves an affinity group by its human-readable name.
        parameters:
            - description: The unique, human-readable name of the affinity group.
              in: path
              name: name
              required: true
              schema:
                type: string
    /group-by-purpose/{purpose}:
        get:
            description: |-
                Lists groups filtered by purpose type with pagination support.
                Purpose types categorize groups (e.g., "Internal Embeddings", "Internal Tasks").
                Accepts 'cursor' (RFC3339Nano timestamp) and 'limit' parameters for pagination.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimetypes_AffinityGroup'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists groups filtered by purpose type with pagination support.
        parameters:
            - description: The purpose category to filter groups by (e.g., 'embeddings').
              in: path
              name: purpose
              required: true
              schema:
                type: string
    /groups:
        get:
            description: |-
                Lists all affinity groups in the system.
                Returns basic group information without associated backends or models.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimetypes_AffinityGroup'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all affinity groups in the system.
        post:
            description: |-
                Creates a new affinity group for organizing backends and models.
                group names must be unique within the system.
                groups allow grouping of backends and models for specific operational purposes (e.g., embeddings, tasks).
                When affinity groups are enabled in the system, request routing ONLY considers resources that share a affinity group.
                - Models not assigned to any group will NOT be available for execution
                - Backends not assigned to any group will NOT receive models or process requests
                - Resources must be explicitly associated with the same group to work together
                This is a fundamental operational requirement - resources outside groups are effectively invisible to the routing system.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/runtimetypes_AffinityGroup'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_AffinityGroup'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new affinity group for organizing backends and models.
    /groups/{id}:
        delete:
            description: |-
                Removes an affinity group from the system.
                This does not delete the group's backends or models, only the group relationship.
                Returns a simple "deleted" confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Removes an affinity group from the system.
        get:
            description: Retrieves an specific affinity group by its unique ID.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_AffinityGroup'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves an specific affinity group by its unique ID.
        parameters:
            - description: The unique identifier of the affinity group.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing affinity group configuration.
                The ID from the URL path overrides any ID in the request body.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/runtimetypes_AffinityGroup'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_AffinityGroup'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing affinity group configuration.
    /hooks/remote:
        get:
            description: |-
                Lists remote hooks, optionally filtering by a unique name.
                Returns a list of remote hooks.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimetypes_RemoteHook'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists remote hooks, optionally filtering by a unique name.
        post:
            description: |-
                Creates a new remote hook configuration.
                Remote hooks allow task-chains to trigger external HTTP services during execution.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/runtimetypes_RemoteHook'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_RemoteHook'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new remote hook configuration.
    /hooks/remote/{id}:
        delete:
            description: |-
                Deletes a remote hook configuration by ID.
                Returns a simple "deleted" confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes a remote hook configuration by ID.
        get:
            description: |-
                Retrieves a specific remote hook configuration by ID.
                Returns a simple "deleted" confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_RemoteHook'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves a specific remote hook configuration by ID.
        parameters:
            - description: The unique identifier for the remote hook.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing remote hook configuration.
                The ID from the URL path overrides any ID in the request body.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/runtimetypes_RemoteHook'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_RemoteHook'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing remote hook configuration.
    /hooks/remote/by-name/{name}:
        get:
            description: |-
                Retrieves a remote hook configuration by name.
                Returns a simple "deleted" confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_RemoteHook'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves a remote hook configuration by name.
        parameters:
            - description: The unique name for the remote hook.
              in: path
              name: name
              required: true
              schema:
                type: string
    /hooks/schemas:
        get:
            description: |-
                Retrieves the JSON openAPI schemas for all supported hook types.
                Returns a list of hook openAPI schemas.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: object
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves the JSON openAPI schemas for all supported hook types.
    /index:
        post:
            description: |-
                Indexes content chunks for semantic search.
                Processes text chunks into vector embeddings and stores them for retrieval.
                Supports replacement of existing indexed content.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/indexservice_IndexRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/indexservice_IndexResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Indexes content chunks for semantic search.
    /ingest:
        post:
            description: |-
                IngestEvent processes incoming events by applying mapping configuration
                This endpoint transforms raw payloads into structured events using the mapping
                configuration specified by the path query parameter. The mapping defines how to extract
                event properties like aggregate_id, event_type, etc. from the incoming data.
                The path query parameter corresponds to a pre-configured mapping that specifies:
                - How to extract the event type from the payload
                - How to extract the aggregate ID and type
                - How to handle metadata mapping
                - Field extraction rules for event properties
            parameters:
                - description: The mapping configuration path to apply
                  in: query
                  name: path
                  schema:
                    type: string
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/eventstore_Event'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: IngestEvent processes incoming events by applying mapping configuration
    /jobs/{id}/done:
        parameters:
            - description: The unique identifier of the job.
              in: path
              name: id
              required: true
              schema:
                type: string
        patch:
            description: |-
                Marks a job as successfully completed.
                The leaser must match the current job lease holder.
                Returns no content on success.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/dispatchapi_JobUpdateRequest'
                required: true
            responses:
                "200":
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Marks a job as successfully completed.
    /jobs/{id}/failed:
        parameters:
            - description: The unique identifier of the job.
              in: path
              name: id
              required: true
              schema:
                type: string
        patch:
            description: |-
                Marks a job as failed.
                The leaser must match the current job lease holder.
                Returns a confirmation message on success.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/dispatchapi_JobUpdateRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Marks a job as failed.
    /jobs/in-progress:
        get:
            description: |-
                Lists all jobs currently in progress.
                Returns jobs in paginated format using cursor-based pagination.
            parameters:
                - description: RFC3339 timestamp for pagination cursor.
                  in: query
                  name: cursor
                  schema:
                    type: string
                - description: Maximum number of jobs to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_dispatchservice_Job'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all jobs currently in progress.
    /jobs/pending:
        get:
            description: |-
                Lists all pending jobs available for leasing.
                Returns jobs in paginated format using cursor-based pagination.
            parameters:
                - description: RFC3339 timestamp for pagination cursor.
                  in: query
                  name: cursor
                  schema:
                    type: string
                - description: Maximum number of jobs to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_dispatchservice_Job'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all pending jobs available for leasing.
    /keywords:
        get:
            description: |-
                Lists all extracted keywords from indexed content.
                Returns keywords in paginated format for browsing and discovery.
            parameters:
                - description: Maximum number of keywords to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: RFC3339 timestamp for pagination cursor.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all extracted keywords from indexed content.
    /leases:
        post:
            description: |-
                Assigns a pending job to a leaser for processing.
                Leases a job for the specified duration, making it unavailable to other leasers.
                Returns the leased job details for processing.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/dispatchapi_AssignRequest'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/dispatchservice_LeasedJob'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Assigns a pending job to a leaser for processing.
    /login:
        post:
            description: |-
                Authenticates a user using email and password (for machine-to-machine or backend-for-frontend flows).
                Returns a JWT token and user details on success.
                WARNING: Do not use this endpoint directly from browser-based clients.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/usersapi_loginRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_loginResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Authenticates a user using email and password (for machine-to-machine or backend-for-frontend flows).
    /mapping:
        delete:
            description: |-
                Deletes an event mapping configuration by path.
                Returns a simple confirmation message on success.
            parameters:
                - description: The unique path identifier for the mapping.
                  in: query
                  name: path
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes an event mapping configuration by path.
        get:
            description: Retrieves details for a specific event mapping by path.
            parameters:
                - description: The unique path identifier for the mapping.
                  in: query
                  name: path
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/eventstore_MappingConfig'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves details for a specific event mapping by path.
        put:
            description: |-
                Updates an existing event mapping configuration.
                The path from the query parameter overrides any path in the request body.
            parameters:
                - description: The unique path identifier for the mapping.
                  in: query
                  name: path
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/eventstore_MappingConfig'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/eventstore_MappingConfig'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing event mapping configuration.
    /mappings:
        get:
            description: |-
                Lists all configured event mappings.
                Returns mappings sorted by path in ascending order.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_eventstore_MappingConfig'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all configured event mappings.
        post:
            description: |-
                Creates a new event mapping configuration.
                Mappings define how to extract structured events from incoming webhook payloads.
                They specify how to map JSON fields and headers to event properties like aggregate_id, event_type, etc.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/eventstore_MappingConfig'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/eventstore_MappingConfig'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new event mapping configuration.
    /model-affinity/{groupID}/models:
        get:
            description: |-
                Lists all models associated with a specific affinity group.
                Returns basic model information without backend-specific details.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimetypes_Model'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all models associated with a specific affinity group.
        parameters:
            - description: The unique identifier of the affinity group.
              in: path
              name: groupID
              required: true
              schema:
                type: string
    /model-affinity/{groupID}/models/{modelID}:
        delete:
            description: |-
                Removes a model from an affinity group.
                After removal, requests for this model will no longer be routed to backends in this affinity group.
                This model can still be used with backends in other groups where it remains assigned.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Removes a model from an affinity group.
        parameters:
            - description: The unique identifier of the affinity group.
              in: path
              name: groupID
              required: true
              schema:
                type: string
            - description: The unique identifier of the model to be assigned.
              in: path
              name: modelID
              required: true
              schema:
                type: string
        post:
            description: |-
                Associates a model with an affinity group.
                After assignment, requests for this model can be routed to any backend in the affinity group.
                This enables request routing between the model and backends that share this affinity group.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Associates a model with an affinity group.
    /model-affinity/{modelID}/groups:
        get:
            description: |-
                Lists all affinity groups that a specific model belongs to.
                Useful for understanding where a model is deployed across the system.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimetypes_AffinityGroup'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all affinity groups that a specific model belongs to.
        parameters:
            - description: The unique identifier of the model.
              in: path
              name: modelID
              required: true
              schema:
                type: string
    /models:
        get:
            description: |-
                Lists all registered models in internal format.
                This endpoint returns full model details including timestamps and capabilities.
                Intended for administrative and debugging purposes.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimetypes_Model'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all registered models in internal format.
        post:
            description: |-
                Declares a new model to the system.
                The model must be available in a configured backend or will be queued for download.
                IMPORTANT: Models not assigned to any group will NOT be available for request processing.
                If groups are enabled, to make a model available to backends, it must be explicitly added to at least one group.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/runtimetypes_Model'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_Model'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Declares a new model to the system.
    /models/{id}:
        delete:
            description: |-
                Deletes a model from the system registry.
                - Does not remove the model from backend storage (requires separate backend operation)
                - Accepts 'purge=true' query parameter to also remove related downloads from queue
            parameters:
                - description: If true, also removes the model from the download queue and cancels any in-progress downloads.
                  in: query
                  name: purge
                  schema:
                    default: "false"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes a model from the system registry.
        parameters:
            - description: The unique identifier for the model.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing model registration.
                Only mutable fields (like capabilities and context length) can be updated.
                The model ID cannot be changed.
                Returns the updated model configuration.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/runtimetypes_Model'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimetypes_Model'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing model registration.
    /openai/{chainID}/v1/chat/completions:
        parameters:
            - description: The ID of the task chain to use.
              in: path
              name: chainID
              required: true
              schema:
                type: string
        post:
            description: |-
                Processes chat requests using the configured task chain.
                This endpoint provides OpenAI-compatible chat completions by executing
                the configured task chain with the provided request data.
                The task chain must be configured first using the /chat/taskchain endpoint.
                --- SSE Streaming ---
                When 'stream: true' is set in the request body, the endpoint streams the response
                using Server-Sent Events (SSE) in the OpenAI-compatible format.
                Clients should concatenate the 'content' from the 'delta' object in each 'data' event
                to reconstruct the full message. The stream is terminated by a 'data: [DONE]' message.
                Example event stream:
                data: {"id":"chat_123","object":"chat.completion.chunk","created":1690000000,"model":"mistral:instruct","choices":[{"index":0,"delta":{"content":"Hello"},"finish_reason":null}]}
                data: {"id":"chat_123","object":"chat.completion.chunk","created":1690000000,"model":"mistral:instruct","choices":[{"index":0,"delta":{"content":" world"},"finish_reason":null}]}
                data: [DONE]
            parameters:
                - description: If provided the stacktraces will be added to the response.
                  in: query
                  name: stackTrace
                  schema:
                    default: "false"
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/taskengine_OpenAIChatRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/chatapi_OpenAIChatResponse'
                        text/event-stream:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Processes chat requests using the configured task chain.
    /openai/{chainID}/v1/models:
        get:
            description: |-
                Lists all registered models in OpenAI-compatible format.
                Returns models as they would appear in OpenAI's /v1/models endpoint.
                NOTE: Only models assigned to at least one group will be available for request processing.
                Models not assigned to any group exist in the configuration but are completely ignored by the routing system.
                the chainID parameter is currently unused.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/backendapi_OpenAICompatibleModelList'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all registered models in OpenAI-compatible format.
        parameters:
            - description: The ID of the chain that links to the openAI completion API. Currently unused.
              in: path
              name: chainID
              required: true
              schema:
                type: string
    /openai/v1/models:
        get:
            description: |-
                Lists all registered models in OpenAI-compatible format.
                Returns models as they would appear in OpenAI's /v1/models endpoint.
                NOTE: Only models assigned to at least one group will be available for request processing.
                Models not assigned to any group exist in the configuration but are completely ignored by the routing system.
                the chainID parameter is currently unused.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/backendapi_OpenAICompatibleModelList'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all registered models in OpenAI-compatible format.
    /permissions:
        get:
            description: |-
                Returns the list of supported permission levels.
                Permissions: none, view, edit, manage (in increasing order of privilege).
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Returns the list of supported permission levels.
    /providers/{providerType}/config:
        delete:
            description: |-
                Removes provider configuration from the system.
                After deletion, the provider will no longer be available for model execution.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Removes provider configuration from the system.
        get:
            description: Retrieves configuration details for a specific external provider.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/runtimestate_ProviderConfig'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves configuration details for a specific external provider.
        parameters:
            - description: The type of the provider to delete (e.g., 'openai', 'gemini').
              in: path
              name: providerType
              required: true
              schema:
                type: string
    /providers/configs:
        get:
            description: Lists all configured external providers with pagination support.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_runtimestate_ProviderConfig'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all configured external providers with pagination support.
    /queue:
        get:
            description: |-
                Retrieves the current model download queue state.
                Returns a list of models waiting to be downloaded.
                Downloading models is only supported for ollama backends.
                If groups are enabled, models will only be downloaded to backends
                that are associated with at least one group.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_downloadservice_Job'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves the current model download queue state.
    /queue/{model}:
        delete:
            description: |-
                Removes a model from the download queue.
                If a model download is in progress or the download will be cancelled.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Removes a model from the download queue.
        parameters:
            - description: The name of the model to remove from the queue (e.g., 'mistral:latest').
              in: path
              name: model
              required: true
              schema:
                type: string
    /queue/cancel:
        delete:
            description: |-
                Cancels an in-progress model download.
                Accepts either:
                - 'url' query parameter to cancel a download on a specific backend
                - 'model' query parameter to cancel the model download across all backends
                Example: /queue/cancel?url=http://localhost:11434
                /queue/cancel?model=mistral:latest
            parameters:
                - description: The base URL of a specific backend to cancel downloads on.
                  in: query
                  name: url
                  schema:
                    type: string
                - description: The model name to cancel downloads for across all backends.
                  in: query
                  name: model
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Cancels an in-progress model download.
    /queue/inProgress:
        get:
            description: |-
                Streams real-time download progress via Server-Sent Events (SSE).
                Clients should handle 'data' events containing JSON status updates.
                Connection remains open until client disconnects or server closes.
                Example event format:
                event: status
                data: {"status":"downloading","digest":"sha256:abc123","total":1000000,"completed":250000,"model":"mistral:latest","baseUrl":"http://localhost:11434"}
            responses:
                "200":
                    content:
                        text/event-stream:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Streams real-time download progress via Server-Sent Events (SSE).
    /raw-events:
        get:
            description: |-
                Lists raw events within a time range.
                Useful for debugging, auditing, or preparing replay operations.
                Returns events in descending order of received_at.
            parameters:
                - description: Maximum number of raw events to return.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_eventstore_RawEvent'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists raw events within a time range.
        post:
            description: |-
                Ingests a raw event into the event source.
                This handler should not be used directly.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/eventstore_RawEvent'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/eventstore_RawEvent'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Ingests a raw event into the event source.
    /raw-events/{nid}:
        get:
            description: |-
                Retrieves a raw event by numeric ID (NID) within a time range.
                This is useful for inspecting original payloads before mapping,
                or for preparing replay operations.
            parameters:
                - description: Start time in RFC3339 format
                  in: query
                  name: from
                  schema:
                    type: string
                - description: End time in RFC3339 format
                  in: query
                  name: to
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/eventstore_RawEvent'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves a raw event by numeric ID (NID) within a time range.
        parameters:
            - description: Numeric ID of the raw event
              in: path
              name: nid
              required: true
              schema:
                type: string
    /register:
        post:
            description: |-
                Registers a new user and returns authentication credentials.
                For machine-to-machine or backend-for-frontend flows only.
                WARNING: Do not expose this endpoint to public browser clients without additional safeguards.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/userservice_CreateUserRequest'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_loginResponse'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Registers a new user and returns authentication credentials.
    /replay:
        post:
            description: |-
                replayEvent replays a raw event by NID to re-emit its corresponding domain event
                This endpoint fetches a raw event by its numeric ID (NID) and time range,
                applies the current mapping configuration, and appends the resulting domain event.
            parameters:
                - description: Numeric ID of the raw event
                  in: query
                  name: nid
                  schema:
                    type: string
                - description: Start time (RFC3339)
                  in: query
                  name: from
                  schema:
                    type: string
                - description: End time (RFC3339)
                  in: query
                  name: to
                  schema:
                    type: string
            responses:
                "500":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: Internal Server Error
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: replayEvent replays a raw event by NID to re-emit its corresponding domain event
    /search:
        get:
            description: |-
                Searches indexed content using semantic similarity.
                Supports keyword queries with optional parameters for result tuning.
                Can expand file metadata in results when requested.
            parameters:
                - description: Epsilon parameter for search precision.
                  in: query
                  name: epsilon
                  schema:
                    type: string
                - description: Set to 'files' to expand file metadata in results.
                  in: query
                  name: expand
                  schema:
                    type: string
                - description: The search query string.
                  in: query
                  name: q
                  schema:
                    type: string
                - description: 'Maximum number of results to return (default: 10).'
                  in: query
                  name: topk
                  schema:
                    default: "10"
                    type: string
                - description: Search radius for vector similarity.
                  in: query
                  name: radius
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/indexservice_SearchResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Searches indexed content using semantic similarity.
    /state:
        get:
            description: |-
                Retrieves the current runtime state of all LLM backends.
                Includes connection status, loaded models, and error information.
                NOTE: This shows the physical state of backends, but the routing system only considers
                backends and models that are assigned to the same group. Resources not in groups are ignored
                for request processing even if they appear in this response.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_statetype_BackendRuntimeState'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves the current runtime state of all LLM backends.
    /supported:
        get:
            description: |-
                Lists available task-chain hook types.
                Returns all registered external action types that can be used in task-chain hooks.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_string'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists available task-chain hook types.
    /sync:
        post:
            description: SyncMappings refreshes the mapping cache from the underlying storage
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: SyncMappings refreshes the mapping cache from the underlying storage
    /system/resources:
        get:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/object'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: resources
    /system/services:
        get:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/object'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: info
    /taskchains:
        get:
            description: Lists all task chain definitions with pagination.
            parameters:
                - description: The maximum number of items to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "100"
                    type: string
                - description: An optional RFC3339Nano timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_taskengine_TaskChainDefinition'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists all task chain definitions with pagination.
        post:
            description: |-
                Creates a new task chain definition.
                The task chain is stored in the system's KV store for later execution.
                Task chains define workflows with conditional branches, external hooks, and captured execution state.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/taskengine_TaskChainDefinition'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/taskengine_TaskChainDefinition'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new task chain definition.
    /taskchains/{id}:
        delete:
            description: Deletes a task chain definition.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes a task chain definition.
        get:
            description: Retrieves a specific task chain by ID.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/taskengine_TaskChainDefinition'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves a specific task chain by ID.
        parameters:
            - description: The unique identifier for the task chain.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: Updates an existing task chain definition.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/taskengine_TaskChainDefinition'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/taskengine_TaskChainDefinition'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing task chain definition.
    /tasks:
        post:
            description: |-
                Executes dynamic task-chain workflows.
                Task-chains are state-machine workflows (DAGs) with conditional branches,
                external hooks, and captured execution state.
                Requests are routed ONLY to backends that have the requested model available in any shared group.
                If groups are enabled, models and backends not assigned to any group will be completely ignored by the routing system.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/execapi_taskExecutionRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/execapi_taskExecutionResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Executes dynamic task-chain workflows.
    /telegram-frontends:
        get:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/frontends'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: list
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TelegramFrontendDAO'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/frontend'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: create
    /telegram-frontends/{id}:
        delete:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/object'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: delete
        get:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/frontend'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: get
        parameters:
            - in: path
              name: id
              required: true
              schema:
                type: string
        put:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/frontend'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: update
    /telegram-frontends/users/{userId}:
        get:
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/frontends'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: listByUser
        parameters:
            - in: path
              name: userId
              required: true
              schema:
                type: string
    /token_refresh:
        post:
            description: |-
                Refreshes an expired or expiring JWT token.
                Accepts a valid token and returns a new one with extended expiration.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/usersapi_tokenRefreshRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_tokenRefreshResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Refreshes an expired or expiring JWT token.
    /ui/login:
        post:
            description: |-
                Authenticates a user and sets an HTTP-only authentication cookie (for UI clients).
                The cookie is secure, HTTP-only, and has a strict SameSite policy.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/usersapi_loginRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_userResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Authenticates a user and sets an HTTP-only authentication cookie (for UI clients).
    /ui/logout:
        post:
            description: Clears the authentication cookie and logs the user out.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Clears the authentication cookie and logs the user out.
    /ui/me:
        get:
            description: |-
                Returns the currently authenticated user (for UI clients).
                Requires a valid authentication cookie.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_userResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Returns the currently authenticated user (for UI clients).
    /ui/register:
        post:
            description: Registers a new user and sets an authentication cookie (for UI clients).
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/userservice_CreateUserRequest'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_userResponse'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Registers a new user and sets an authentication cookie (for UI clients).
    /ui/token_refresh:
        post:
            description: |-
                Refreshes the authentication token stored in the cookie (for UI clients).
                Reads the current token from the cookie, refreshes it, and updates the cookie.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Refreshes the authentication token stored in the cookie (for UI clients).
    /users:
        get:
            description: |-
                Lists users with pagination support.
                Results are returned in reverse chronological order (newest first).
                Use the 'cursor' parameter to fetch the next page of results.
            parameters:
                - description: The maximum number of users to return per page.
                  in: query
                  name: limit
                  schema:
                    default: "10"
                    type: string
                - description: An optional RFC3339 timestamp to fetch the next page of results.
                  in: query
                  name: cursor
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/array_usersapi_userResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Lists users with pagination support.
        post:
            description: |-
                Creates a new user in the system.
                The user will be assigned a unique ID and subject identifier.
                Passwords are hashed using a secure algorithm before storage.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/userservice_CreateUserRequest'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_userResponse'
                    description: Created
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Creates a new user in the system.
    /users/{id}:
        delete:
            description: |-
                Deletes a user from the system.
                Also removes all associated access control entries and invalidates active sessions.
                Returns a simple confirmation message on success.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: string
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Deletes a user from the system.
        get:
            description: |-
                Retrieves a user by their unique ID.
                Returns 404 if the user does not exist.
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_userResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Retrieves a user by their unique ID.
        parameters:
            - description: The unique identifier of the user.
              in: path
              name: id
              required: true
              schema:
                type: string
        put:
            description: |-
                Updates an existing user's mutable fields.
                Only friendlyName and email can be updated.
                The user ID from the path overrides any ID in the request body.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/userservice_UpdateUserRequest'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/usersapi_userResponse'
                    description: OK
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: Default error response
            summary: Updates an existing user's mutable fields.
security:
    - X-API-Key: []
