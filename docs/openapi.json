{
  "components": {
    "schemas": {
      "ErrorResponse": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "description": "A specific error code identifier (e.g., 'invalid_parameter_value', 'unauthorized')",
                "type": "string"
              },
              "message": {
                "description": "A human-readable error message",
                "type": "string"
              },
              "param": {
                "description": "The parameter that caused the error, if applicable",
                "nullable": true,
                "type": "string"
              },
              "type": {
                "description": "The error type category (e.g., 'invalid_request_error', 'authentication_error')",
                "type": "string"
              }
            },
            "required": [
              "message",
              "type",
              "code"
            ],
            "type": "object"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "array_backendapi_backendSummary": {
        "items": {
          "$ref": "#/components/schemas/backendapi_backendSummary"
        },
        "type": "array"
      },
      "array_downloadservice_Job": {
        "items": {
          "$ref": "#/components/schemas/downloadservice_Job"
        },
        "type": "array"
      },
      "array_eventstore_Event": {
        "items": {
          "$ref": "#/components/schemas/eventstore_Event"
        },
        "type": "array"
      },
      "array_functionstore_EventTrigger": {
        "items": {
          "$ref": "#/components/schemas/functionstore_EventTrigger"
        },
        "type": "array"
      },
      "array_functionstore_Function": {
        "items": {
          "$ref": "#/components/schemas/functionstore_Function"
        },
        "type": "array"
      },
      "array_runtimestate_ProviderConfig": {
        "items": {
          "$ref": "#/components/schemas/runtimestate_ProviderConfig"
        },
        "type": "array"
      },
      "array_runtimetypes_AffinityGroup": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_AffinityGroup"
        },
        "type": "array"
      },
      "array_runtimetypes_Backend": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_Backend"
        },
        "type": "array"
      },
      "array_runtimetypes_Model": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_Model"
        },
        "type": "array"
      },
      "array_runtimetypes_RemoteHook": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_RemoteHook"
        },
        "type": "array"
      },
      "array_statetype_BackendRuntimeState": {
        "items": {
          "$ref": "#/components/schemas/statetype_BackendRuntimeState"
        },
        "type": "array"
      },
      "array_string": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "array_taskengine_TaskChainDefinition": {
        "items": {
          "$ref": "#/components/schemas/taskengine_TaskChainDefinition"
        },
        "type": "array"
      },
      "backendapi_OpenAICompatibleModelList": {
        "properties": {
          "data": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "object": {
            "example": "list",
            "type": "string"
          }
        },
        "required": [
          "object",
          "data"
        ],
        "type": "object"
      },
      "backendapi_backendDetails": {
        "properties": {
          "baseUrl": {
            "example": "http://ollama-prod.internal:11434",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "error": {
            "example": "connection timeout: context deadline exceeded",
            "type": "string"
          },
          "id": {
            "example": "b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e",
            "type": "string"
          },
          "models": {
            "example": "[\\\"mistral:instruct\\\", \\\"llama2:7b\\\", \\\"nomic-embed-text:latest\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "ollama-production",
            "type": "string"
          },
          "pulledModels": {
            "$ref": "#/components/schemas/statetype_ModelPullStatus"
          },
          "type": {
            "example": "ollama",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "models",
          "pulledModels",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "backendapi_backendSummary": {
        "properties": {
          "baseUrl": {
            "example": "http://localhost:11434",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "error": {
            "example": "error-message",
            "type": "string"
          },
          "id": {
            "example": "backend-id",
            "type": "string"
          },
          "models": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "backend-name",
            "type": "string"
          },
          "pulledModels": {
            "$ref": "#/components/schemas/statetype_ModelPullStatus"
          },
          "type": {
            "example": "ollama",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "models",
          "pulledModels",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "downloadservice_Job": {
        "properties": {
          "createdAt": {
            "example": "2021-09-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "1234567890",
            "type": "string"
          },
          "modelJob": {
            "$ref": "#/components/schemas/runtimetypes_QueueItem"
          },
          "scheduledFor": {
            "example": 1630483200,
            "type": "integer"
          },
          "taskType": {
            "example": "model_download",
            "type": "string"
          },
          "validUntil": {
            "example": 1630483200,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "taskType",
          "modelJob",
          "scheduledFor",
          "validUntil",
          "createdAt"
        ],
        "type": "object"
      },
      "eventstore_Event": {
        "properties": {
          "aggregate_id": {
            "example": "aggregate-uuid",
            "type": "string"
          },
          "aggregate_type": {
            "example": "github.webhook",
            "type": "string"
          },
          "created_at": {
            "example": "2023-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "description": "JSON-encoded string",
            "example": {},
            "format": "json",
            "type": "string"
          },
          "event_source": {
            "example": "github.com",
            "type": "string"
          },
          "event_type": {
            "example": "github.pull_request",
            "type": "string"
          },
          "id": {
            "example": "event-uuid",
            "type": "string"
          },
          "metadata": {
            "description": "JSON-encoded string",
            "example": {},
            "format": "json",
            "type": "string"
          },
          "nid": {
            "example": 1,
            "type": "integer"
          },
          "version": {
            "example": 1,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "nid",
          "created_at",
          "event_type",
          "event_source",
          "aggregate_id",
          "aggregate_type",
          "version",
          "data",
          "metadata"
        ],
        "type": "object"
      },
      "execapi_DefaultModelResponse": {
        "properties": {
          "modelName": {
            "example": "mistral:latest",
            "type": "string"
          }
        },
        "required": [
          "modelName"
        ],
        "type": "object"
      },
      "execapi_EmbedRequest": {
        "properties": {
          "text": {
            "example": "Hello, world!",
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "execapi_EmbedResponse": {
        "properties": {
          "vector": {
            "example": "[0.1, 0.2, 0.3, ...]",
            "items": {
              "type": "number"
            },
            "type": "array"
          }
        },
        "required": [
          "vector"
        ],
        "type": "object"
      },
      "execapi_taskExecutionRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/taskengine_TaskChainDefinition"
          },
          "input": {
            "$ref": "#/components/schemas/object"
          },
          "inputType": {
            "example": "string",
            "type": "string"
          }
        },
        "required": [
          "input",
          "inputType",
          "chain"
        ],
        "type": "object"
      },
      "execapi_taskExecutionResponse": {
        "properties": {
          "output": {
            "$ref": "#/components/schemas/object"
          },
          "outputType": {
            "example": "string",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/taskengine_CapturedStateUnit"
          }
        },
        "required": [
          "output",
          "outputType",
          "state"
        ],
        "type": "object"
      },
      "execservice_SimpleExecutionResponse": {
        "properties": {
          "id": {
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "type": "string"
          },
          "response": {
            "example": "I'm doing well, thank you!",
            "type": "string"
          }
        },
        "required": [
          "id",
          "response"
        ],
        "type": "object"
      },
      "execservice_TaskRequest": {
        "properties": {
          "model_name": {
            "example": "gpt-3.5-turbo",
            "type": "string"
          },
          "model_provider": {
            "example": "openai",
            "type": "string"
          },
          "prompt": {
            "example": "Hello, how are you?",
            "type": "string"
          }
        },
        "required": [
          "prompt",
          "model_name",
          "model_provider"
        ],
        "type": "object"
      },
      "functionstore_EventTrigger": {
        "properties": {
          "createdAt": {
            "description": "Timestamps for creation and updates",
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "A user-friendly description of what the trigger does.",
            "example": "Send a welcome email to a new user",
            "type": "string"
          },
          "function": {
            "description": "The name of the function to execute when the event is received.",
            "example": "new_user_created_event_handler",
            "type": "string"
          },
          "listenFor": {
            "$ref": "#/components/schemas/functionstore_Listener"
          },
          "name": {
            "description": "A unique identifier for the trigger.",
            "example": "new_user_created",
            "type": "string"
          },
          "type": {
            "description": "The type of the triggered action.",
            "example": "function",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "listenFor",
          "type",
          "function",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "functionstore_Function": {
        "properties": {
          "createdAt": {
            "description": "Timestamps for creation and updates",
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "A user-friendly description of what the function does.",
            "type": "string"
          },
          "name": {
            "description": "A unique identifier for the function.",
            "example": "send_welcome_email_event_handler",
            "type": "string"
          },
          "script": {
            "description": "The script code itself.",
            "type": "string"
          },
          "scriptType": {
            "description": "The type of script to execute.",
            "example": "goja",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "scriptType",
          "script",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "functionstore_Listener": {
        "properties": {
          "type": {
            "description": "The event type to listen for.",
            "example": "contenox.user_created",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "runtimestate_ProviderConfig": {
        "properties": {
          "APIKey": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "required": [
          "APIKey",
          "Type"
        ],
        "type": "object"
      },
      "runtimetypes_AffinityGroup": {
        "properties": {
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "p9a8b7c6-d5e4-f3a2-b1c0-d9e8f7a6b5c4",
            "type": "string"
          },
          "name": {
            "example": "production-chat",
            "type": "string"
          },
          "purposeType": {
            "example": "Internal Tasks",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "purposeType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_Backend": {
        "properties": {
          "baseUrl": {
            "example": "http://ollama-prod.internal:11434",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e",
            "type": "string"
          },
          "name": {
            "example": "ollama-production",
            "type": "string"
          },
          "type": {
            "example": "ollama",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_InjectionArg": {
        "properties": {
          "in": {
            "example": "body",
            "type": "string"
          },
          "name": {
            "example": "access_token",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/runtimetypes_any"
          }
        },
        "required": [
          "name",
          "value",
          "in"
        ],
        "type": "object"
      },
      "runtimetypes_Model": {
        "properties": {
          "canChat": {
            "example": true,
            "type": "boolean"
          },
          "canEmbed": {
            "example": false,
            "type": "boolean"
          },
          "canPrompt": {
            "example": true,
            "type": "boolean"
          },
          "canStream": {
            "example": true,
            "type": "boolean"
          },
          "contextLength": {
            "example": 8192,
            "type": "integer"
          },
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "m7d8e9f0a-1b2c-3d4e-5f6a-7b8c9d0e1f2a",
            "type": "string"
          },
          "model": {
            "example": "mistral:instruct",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "model",
          "contextLength",
          "canChat",
          "canEmbed",
          "canPrompt",
          "canStream",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_QueueItem": {
        "properties": {
          "model": {
            "example": "llama2:latest",
            "type": "string"
          },
          "url": {
            "example": "http://ollama-prod.internal:11434",
            "type": "string"
          }
        },
        "required": [
          "url",
          "model"
        ],
        "type": "object"
      },
      "runtimetypes_RemoteHook": {
        "properties": {
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "endpointUrl": {
            "example": "http://hooks-endpoint:port",
            "type": "string"
          },
          "headers": {
            "additionalProperties": true,
            "example": "Authorization:Bearer token,Content-Type:application/json",
            "type": "object"
          },
          "id": {
            "example": "h1a2b3c4-d5e6-f7g8-h9i0-j1k2l3m4n5o6",
            "type": "string"
          },
          "name": {
            "example": "mailing-tools",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/runtimetypes_InjectionArg"
          },
          "timeoutMs": {
            "example": 5000,
            "type": "integer"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "endpointUrl",
          "timeoutMs",
          "properties",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "statetype_BackendRuntimeState": {
        "properties": {
          "backend": {
            "$ref": "#/components/schemas/runtimetypes_Backend"
          },
          "error": {
            "description": "Error stores a description of the last encountered error when\ninteracting with or reconciling this backend's state, if any.",
            "example": "connection timeout: context deadline exceeded",
            "type": "string"
          },
          "id": {
            "example": "b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e",
            "type": "string"
          },
          "models": {
            "example": "[\\\"mistral:instruct\\\", \\\"llama2:7b\\\", \\\"nomic-embed-text:latest\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "ollama-production",
            "type": "string"
          },
          "pulledModels": {
            "$ref": "#/components/schemas/statetype_ModelPullStatus"
          }
        },
        "required": [
          "id",
          "name",
          "models",
          "pulledModels",
          "backend"
        ],
        "type": "object"
      },
      "statetype_ModelDetails": {
        "properties": {
          "families": {
            "example": "[\\\"Mistral\\\", \\\"7B\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "family": {
            "example": "Mistral",
            "type": "string"
          },
          "format": {
            "example": "gguf",
            "type": "string"
          },
          "parameterSize": {
            "example": "7B",
            "type": "string"
          },
          "parentModel": {
            "example": "mistral:7b",
            "type": "string"
          },
          "quantizationLevel": {
            "example": "Q4_K_M",
            "type": "string"
          }
        },
        "required": [
          "parentModel",
          "format",
          "family",
          "families",
          "parameterSize",
          "quantizationLevel"
        ],
        "type": "object"
      },
      "statetype_ModelPullStatus": {
        "properties": {
          "canChat": {
            "example": true,
            "type": "boolean"
          },
          "canEmbed": {
            "example": false,
            "type": "boolean"
          },
          "canPrompt": {
            "example": true,
            "type": "boolean"
          },
          "canStream": {
            "example": true,
            "type": "boolean"
          },
          "contextLength": {
            "example": 4096,
            "type": "integer"
          },
          "details": {
            "$ref": "#/components/schemas/statetype_ModelDetails"
          },
          "digest": {
            "example": "sha256:9e3a6c0d3b5e7f8a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a",
            "type": "string"
          },
          "model": {
            "example": "mistral:instruct",
            "type": "string"
          },
          "modifiedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "Mistral 7B Instruct",
            "type": "string"
          },
          "size": {
            "example": 4709611008,
            "type": "integer"
          }
        },
        "required": [
          "name",
          "model",
          "modifiedAt",
          "size",
          "digest",
          "details",
          "contextLength",
          "canChat",
          "canEmbed",
          "canPrompt",
          "canStream"
        ],
        "type": "object"
      },
      "taskengine_CapturedStateUnit": {
        "properties": {
          "duration": {
            "description": "in nanoseconds",
            "example": 452000000,
            "format": "nanoseconds",
            "type": "integer"
          },
          "error": {
            "$ref": "#/components/schemas/taskengine_ErrorResponse"
          },
          "input": {
            "example": "This is a test input that needs validation",
            "type": "string"
          },
          "inputType": {
            "example": "string",
            "type": "string"
          },
          "inputVar": {
            "description": "Which variable was used as input",
            "example": "input",
            "type": "string"
          },
          "output": {
            "example": "valid",
            "type": "string"
          },
          "outputType": {
            "example": "string",
            "type": "string"
          },
          "taskHandler": {
            "example": "condition_key",
            "type": "string"
          },
          "taskID": {
            "example": "validate_input",
            "type": "string"
          },
          "transition": {
            "example": "valid_input",
            "type": "string"
          }
        },
        "required": [
          "taskID",
          "taskHandler",
          "inputType",
          "outputType",
          "transition",
          "duration",
          "error",
          "input",
          "output",
          "inputVar"
        ],
        "type": "object"
      },
      "taskengine_ComposeTask": {
        "properties": {
          "strategy": {
            "description": "Strategy defines how values should be merged (\"override\", \"merge_chat_histories\", \"append_string_to_chat_history\").\nOptional; defaults to \"override\" or \"merge_chat_histories\" if both output and WithVar values are ChatHistory.\n\"merge_chat_histories\": If both output and WithVar values are ChatHistory,\nappends the WithVar's Messages to the output's Messages.",
            "type": "string"
          },
          "with_var": {
            "description": "Selects the variable to compose the current input with.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "taskengine_ErrorResponse": {
        "properties": {
          "error": {
            "example": "validation failed: input contains prohibited content",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "taskengine_HookCall": {
        "properties": {
          "args": {
            "additionalProperties": true,
            "description": "Args are key-value pairs to parameterize the hook call.\nExample: {\"to\": \"user@example.com\", \"subject\": \"Notification\"}",
            "example": "{\\\"channel\\\": \\\"#alerts\\\", \\\"message\\\": \\\"Task completed successfully\\\"}",
            "type": "object"
          },
          "name": {
            "description": "Name is the registered hook-service (e.g., \"send_email\").",
            "example": "slack",
            "type": "string"
          },
          "tool_name": {
            "description": "ToolName is the name of the tool to invoke (e.g., \"send_slack_notification\").",
            "example": "send_slack_notification",
            "type": "string"
          }
        },
        "required": [
          "name",
          "tool_name",
          "args"
        ],
        "type": "object"
      },
      "taskengine_LLMExecutionConfig": {
        "properties": {
          "hide_tools": {
            "example": "[\\\"tool1\\\", \\\"hook_name1.tool1\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hooks": {
            "example": "[\\\"slack_notification\\\", \\\"email_notification\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "model": {
            "example": "mistral:instruct",
            "type": "string"
          },
          "models": {
            "example": "[\\\"gpt-4\\\", \\\"gpt-3.5-turbo\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pass_clients_tools": {
            "type": "boolean"
          },
          "provider": {
            "example": "ollama",
            "type": "string"
          },
          "providers": {
            "example": "[\\\"ollama\\\", \\\"openai\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "temperature": {
            "example": 0.7,
            "type": "number"
          }
        },
        "required": [
          "model",
          "pass_clients_tools"
        ],
        "type": "object"
      },
      "taskengine_OpenAIChatRequest": {
        "properties": {
          "frequency_penalty": {
            "example": 0,
            "type": "number"
          },
          "max_tokens": {
            "example": 512,
            "type": "integer"
          },
          "messages": {
            "$ref": "#/components/schemas/taskengine_OpenAIChatRequestMessage"
          },
          "model": {
            "example": "mistral:instruct",
            "type": "string"
          },
          "n": {
            "example": 1,
            "type": "integer"
          },
          "presence_penalty": {
            "example": 0,
            "type": "number"
          },
          "stop": {
            "example": "[\\\"\\\\n\\\", \\\"###\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "stream": {
            "example": false,
            "type": "boolean"
          },
          "temperature": {
            "example": 0.7,
            "type": "number"
          },
          "tool_choice": {
            "description": "Can be \"none\", \"auto\", or {\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}"
          },
          "tools": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "top_p": {
            "example": 1,
            "type": "number"
          },
          "user": {
            "example": "user_123",
            "type": "string"
          }
        },
        "required": [
          "model",
          "messages"
        ],
        "type": "object"
      },
      "taskengine_OpenAIChatRequestMessage": {
        "properties": {
          "content": {
            "example": "Hello, how are you?",
            "type": "string"
          },
          "role": {
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "role",
          "content"
        ],
        "type": "object"
      },
      "taskengine_TaskChainDefinition": {
        "properties": {
          "debug": {
            "description": "Enables capturing user input and output.",
            "type": "boolean"
          },
          "description": {
            "description": "Description provides a human-readable summary of the chain's purpose.",
            "type": "string"
          },
          "id": {
            "description": "ID uniquely identifies the chain.",
            "type": "string"
          },
          "tasks": {
            "$ref": "#/components/schemas/taskengine_TaskDefinition"
          },
          "token_limit": {
            "description": "TokenLimit is the token limit for the context window (used during execution).",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "debug",
          "description",
          "tasks",
          "token_limit"
        ],
        "type": "object"
      },
      "taskengine_TaskDefinition": {
        "properties": {
          "compose": {
            "$ref": "#/components/schemas/taskengine_ComposeTask"
          },
          "description": {
            "description": "Description is a human-readable summary of what the task does.",
            "example": "Validates user input meets quality requirements",
            "type": "string"
          },
          "execute_config": {
            "$ref": "#/components/schemas/taskengine_LLMExecutionConfig"
          },
          "handler": {
            "description": "Handler determines how the LLM output (or hook) will be interpreted.",
            "example": "condition_key",
            "type": "string"
          },
          "hook": {
            "$ref": "#/components/schemas/taskengine_HookCall"
          },
          "id": {
            "description": "ID uniquely identifies the task within the chain.",
            "example": "validate_input",
            "type": "string"
          },
          "input_var": {
            "description": "InputVar is the name of the variable to use as input for the task.\nExample: \"input\" for the original input.\nEach task stores its output in a variable named with it's task id.",
            "example": "input",
            "type": "string"
          },
          "output_template": {
            "description": "OutputTemplate is an optional go template to format the output of a hook.\nIf specified, the hook's JSON output will be used as data for the template.\nThe final output of the task will be the rendered string.\nExample: \"The weather is {{.weather}} with a temperature of {{.temperature}}.\"",
            "example": "Hook result: {{.status}}",
            "type": "string"
          },
          "print": {
            "description": "Print optionally formats the output for display/logging.\nSupports template variables from previous task outputs.\nOptional for all task types except Hook where it's rarely used.\nExample: \"The score is: {{.previous_output}}\"",
            "example": "Validation result: {{.validate_input}}",
            "type": "string"
          },
          "prompt_template": {
            "description": "PromptTemplate is the text prompt sent to the LLM.\nIt's Required and only applicable for the raw_string type.\nSupports template variables from previous task outputs.\nExample: \"Rate the quality from 1-10: {{.input}}\"",
            "example": "Is this input valid? {{.input}}",
            "type": "string"
          },
          "retry_on_failure": {
            "description": "RetryOnFailure sets how many times to retry this task on failure.\nApplies to all task types including Hooks.\nDefault: 0 (no retries)",
            "example": 2,
            "type": "integer"
          },
          "system_instruction": {
            "description": "SystemInstruction provides additional instructions to the LLM, if applicable system level will be used.",
            "example": "You are a quality control assistant. Respond only with 'valid' or 'invalid'.",
            "type": "string"
          },
          "timeout": {
            "description": "Timeout optionally sets a timeout for task execution.\nFormat: \"10s\", \"2m\", \"1h\" etc.\nOptional for all task types.",
            "example": "30s",
            "type": "string"
          },
          "transition": {
            "$ref": "#/components/schemas/taskengine_TaskTransition"
          },
          "valid_conditions": {
            "additionalProperties": true,
            "description": "ValidConditions defines allowed values for ConditionKey tasks.\nRequired for ConditionKey tasks, ignored for all other types.\nExample: {\"yes\": true, \"no\": true} for a yes/no condition.",
            "example": "{\\\"valid\\\": true, \\\"invalid\\\": true}",
            "type": "object"
          }
        },
        "required": [
          "id",
          "description",
          "handler",
          "prompt_template",
          "transition"
        ],
        "type": "object"
      },
      "taskengine_TaskTransition": {
        "properties": {
          "branches": {
            "$ref": "#/components/schemas/taskengine_TransitionBranch"
          },
          "on_failure": {
            "description": "OnFailure is the task ID to jump to in case of failure.",
            "example": "error_handler",
            "type": "string"
          }
        },
        "required": [
          "on_failure",
          "branches"
        ],
        "type": "object"
      },
      "taskengine_TransitionBranch": {
        "properties": {
          "goto": {
            "description": "Goto specifies the target task ID if this branch is taken.\nLeave empty or use taskengine.TermEnd to end the chain.",
            "example": "positive_response",
            "type": "string"
          },
          "operator": {
            "description": "Operator defines how to compare the task's output to When.",
            "example": "equals",
            "type": "string"
          },
          "when": {
            "description": "When specifies the condition that must be met to follow this branch.\nFormat depends on the task type:\n- For condition_key: exact string match\n- For parse_number: numeric comparison (using Operator)",
            "example": "yes",
            "type": "string"
          }
        },
        "required": [
          "when",
          "goto"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "X-API-Key": {
        "in": "header",
        "name": "X-API-Key",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "contenox/runtime – LLM Backend Management API",
    "version": "v0.0.51-150-ge493108-dirty"
  },
  "openapi": "3.1.0",
  "paths": {
    "/backend-affinity/{backendID}/groups": {
      "get": {
        "description": "Lists all affinity groups that a specific backend belongs to.\nUseful for understanding which model sets a backend has access to.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_AffinityGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all affinity groups that a specific backend belongs to."
      },
      "parameters": [
        {
          "description": "The unique identifier of the backend.",
          "in": "path",
          "name": "backendID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/backend-affinity/{groupID}/backends": {
      "get": {
        "description": "Lists all backends associated with a specific affinity group.\nReturns basic backend information without runtime state.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all backends associated with a specific affinity group."
      },
      "parameters": [
        {
          "description": "The unique identifier of the affinity group.",
          "in": "path",
          "name": "groupID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/backend-affinity/{groupID}/backends/{backendID}": {
      "delete": {
        "description": "Removes a backend from an affinity group.\nAfter removal, the backend will no longer be eligible to process requests for models in this affinity group.\nRequests requiring models from this affinity group will no longer be routed to this backend.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a backend from an affinity group."
      },
      "parameters": [
        {
          "description": "The unique identifier of the affinity group.",
          "in": "path",
          "name": "groupID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The unique identifier of the backend to be assigned.",
          "in": "path",
          "name": "backendID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Associates a backend with an affinity group.\nAfter assignment, the backend can process requests for all models in the affinity group.\nThis enables request routing between the backend and models that share this affinity group.",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Associates a backend with an affinity group."
      }
    },
    "/backends": {
      "get": {
        "description": "Lists all configured backend connections with runtime status.\nNOTE: Only backends assigned to at least one group will be used for request processing.\nBackends not assigned to any group exist in the configuration but are completely ignored by the routing system.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_backendapi_backendSummary"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all configured backend connections with runtime status."
      },
      "post": {
        "description": "Creates a new backend connection to an LLM provider.\nBackends represent connections to LLM services (e.g., Ollama, OpenAI) that can host models.\nNote: Creating a backend will be provisioned on the next synchronization cycle.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Backend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Backend"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new backend connection to an LLM provider."
      }
    },
    "/backends/{id}": {
      "delete": {
        "description": "Removes a backend connection.\nThis does not deleteBackend models from the remote provider, only removes the connection.\nReturns a simple \"backend removed\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a backend connection."
      },
      "get": {
        "description": "Retrieves complete information for a specific backend",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backendapi_backendDetails"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves complete information for a specific backend"
      },
      "parameters": [
        {
          "description": "The unique identifier for the backend.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing backend configuration.\nThe ID from the URL path overrides any ID in the request body.\nNote: Updating a backend will be provisioned on the next synchronization cycle.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Backend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing backend configuration."
      }
    },
    "/defaultmodel": {
      "get": {
        "description": "Returns the default model configured during system initialization.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_DefaultModelResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Returns the default model configured during system initialization."
      }
    },
    "/embed": {
      "post": {
        "description": "Generates vector embeddings for text.\nUses the system's default embedding model configured at startup.\nRequests are routed ONLY to backends that have the default model available in any shared group.\nIf groups are enabled, models and backends not assigned to any group will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execapi_EmbedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_EmbedResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Generates vector embeddings for text."
      }
    },
    "/event-triggers": {
      "get": {
        "description": "Lists all event triggers with pagination\nReturns event triggers in creation order, with the oldest triggers first.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_functionstore_EventTrigger"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all event triggers with pagination"
      },
      "post": {
        "description": "Creates a new event trigger\nEvent triggers listen for specific events and execute associated functions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/functionstore_EventTrigger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/functionstore_EventTrigger"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new event trigger"
      }
    },
    "/event-triggers/event-type/{eventType}": {
      "get": {
        "description": "Lists event triggers filtered by event type\nReturns all event triggers that listen for the specified event type.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_functionstore_EventTrigger"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists event triggers filtered by event type"
      },
      "parameters": [
        {
          "description": "The event type to filter by.",
          "in": "path",
          "name": "eventType",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/event-triggers/function/{functionName}": {
      "get": {
        "description": "Lists event triggers filtered by function name\nReturns all event triggers that execute the specified function.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_functionstore_EventTrigger"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists event triggers filtered by function name"
      },
      "parameters": [
        {
          "description": "The function name to filter by.",
          "in": "path",
          "name": "functionName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/event-triggers/{name}": {
      "delete": {
        "description": "Deletes an event trigger from the system\nReturns a simple confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Deletes an event trigger from the system"
      },
      "get": {
        "description": "Retrieves details for a specific event trigger",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/functionstore_EventTrigger"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves details for a specific event trigger"
      },
      "parameters": [
        {
          "description": "The unique name of the event trigger.",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing event trigger configuration\nThe name from the URL path overrides any name in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/functionstore_EventTrigger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/functionstore_EventTrigger"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing event trigger configuration"
      }
    },
    "/events": {
      "post": {
        "description": "Appends a new event to the event store.\nThe event ID and CreatedAt will be auto-generated if not provided.\nEvents must be within ±10 minutes of current server time.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eventstore_Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventstore_Event"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Appends a new event to the event store."
      }
    },
    "/events/aggregate": {
      "get": {
        "description": "Retrieves events for a specific aggregate within a time range.\nUseful for rebuilding aggregate state or auditing changes.",
        "parameters": [
          {
            "description": "The unique ID of the aggregate.",
            "in": "query",
            "name": "aggregate_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of events to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "The type of event to filter by.",
            "in": "query",
            "name": "event_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The aggregate type (e.g., 'user', 'order').",
            "in": "query",
            "name": "aggregate_type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_eventstore_Event"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves events for a specific aggregate within a time range."
      }
    },
    "/events/source": {
      "get": {
        "description": "Retrieves events from a specific source within a time range.\nUseful for auditing or monitoring events from specific subsystems.",
        "parameters": [
          {
            "description": "The type of event to filter by.",
            "in": "query",
            "name": "event_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The source system that generated the event.",
            "in": "query",
            "name": "event_source",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of events to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_eventstore_Event"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves events from a specific source within a time range."
      }
    },
    "/events/stream/{eventType}": {
      "get": {
        "description": "Streams events of a specific type in real-time using Server-Sent Events (SSE)\nThis endpoint provides real-time event streaming for the specified event type.\nClients will receive new events as they are appended to the event store.\n--- SSE Streaming ---\nThe endpoint streams events using Server-Sent Events (SSE) format.\nEach event is sent as a JSON object in the data field.\nExample event stream:\ndata: {\"id\":\"evt_123\",\"event_type\":\"user_created\",\"aggregate_type\":\"user\",\"aggregate_id\":\"usr_456\",\"version\":1,\"data\":{\"name\":\"John Doe\"},\"created_at\":\"2023-01-01T00:00:00Z\"}\ndata: {\"id\":\"evt_124\",\"event_type\":\"user_updated\",\"aggregate_type\":\"user\",\"aggregate_id\":\"usr_456\",\"version\":2,\"data\":{\"name\":\"Jane Doe\"},\"created_at\":\"2023-01-01T00:01:00Z\"}",
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Streams events of a specific type in real-time using Server-Sent Events (SSE)"
      },
      "parameters": [
        {
          "description": "The type of events to stream.",
          "in": "path",
          "name": "eventType",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/events/type": {
      "delete": {
        "description": "Deletes all events of a specific type within a time range.\nUSE WITH CAUTION — this is a destructive operation.\nTypically used for GDPR compliance or cleaning up test data.",
        "parameters": [
          {
            "description": "The type of event to delete.",
            "in": "query",
            "name": "event_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start time in RFC3339 format.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time in RFC3339 format.",
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Deletes all events of a specific type within a time range."
      },
      "get": {
        "description": "Retrieves events of a specific type within a time range.\nUseful for cross-aggregate analysis or system-wide event monitoring.",
        "parameters": [
          {
            "description": "The type of event to filter by.",
            "in": "query",
            "name": "event_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of events to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_eventstore_Event"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves events of a specific type within a time range."
      }
    },
    "/events/types": {
      "get": {
        "description": "Lists distinct event types that occurred within a time range.\nUseful for discovery or building event type filters in UIs.",
        "parameters": [
          {
            "description": "Maximum number of event types to return.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists distinct event types that occurred within a time range."
      }
    },
    "/execute": {
      "post": {
        "description": "Runs the prompt through the default LLM.\nThis endpoint provides basic chat completion optimized for machine-to-machine (M2M) communication.\nRequests are routed ONLY to backends that have the default model available in any shared group.\nIf groups are enabled, models and backends not assigned to any group will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execservice_TaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execservice_SimpleExecutionResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Runs the prompt through the default LLM."
      }
    },
    "/executor/sync": {
      "post": {
        "description": "Implement the handler method",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Implement the handler method"
      }
    },
    "/functions": {
      "get": {
        "description": "Lists all registered functions with pagination\nReturns functions in creation order, with the oldest functions first.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_functionstore_Function"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all registered functions with pagination"
      },
      "post": {
        "description": "Creates a new serverless function\nFunctions contain executable JavaScript code that runs in a secure sandbox.\nAfter execution, functions can trigger chains for further processing.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/functionstore_Function"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/functionstore_Function"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new serverless function"
      }
    },
    "/functions/{name}": {
      "delete": {
        "description": "Deletes a function from the system\nReturns a simple confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Deletes a function from the system"
      },
      "get": {
        "description": "Retrieves details for a specific function",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/functionstore_Function"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves details for a specific function"
      },
      "parameters": [
        {
          "description": "The unique name of the function.",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing function configuration\nThe name from the URL path overrides any name in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/functionstore_Function"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/functionstore_Function"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing function configuration"
      }
    },
    "/group-by-name/{name}": {
      "get": {
        "description": "Retrieves an affinity group by its human-readable name.\nUseful for configuration where ID might not be known but name is consistent.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_AffinityGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves an affinity group by its human-readable name."
      },
      "parameters": [
        {
          "description": "The unique, human-readable name of the affinity group.",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/group-by-purpose/{purpose}": {
      "get": {
        "description": "Lists groups filtered by purpose type with pagination support.\nPurpose types categorize groups (e.g., \"Internal Embeddings\", \"Internal Tasks\").\nAccepts 'cursor' (RFC3339Nano timestamp) and 'limit' parameters for pagination.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_AffinityGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists groups filtered by purpose type with pagination support."
      },
      "parameters": [
        {
          "description": "The purpose category to filter groups by (e.g., 'embeddings').",
          "in": "path",
          "name": "purpose",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/groups": {
      "get": {
        "description": "Lists all affinity groups in the system.\nReturns basic group information without associated backends or models.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_AffinityGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all affinity groups in the system."
      },
      "post": {
        "description": "Creates a new affinity group for organizing backends and models.\ngroup names must be unique within the system.\ngroups allow grouping of backends and models for specific operational purposes (e.g., embeddings, tasks).\nWhen affinity groups are enabled in the system, request routing ONLY considers resources that share a affinity group.\n- Models not assigned to any group will NOT be available for execution\n- Backends not assigned to any group will NOT receive models or process requests\n- Resources must be explicitly associated with the same group to work together\nThis is a fundamental operational requirement - resources outside groups are effectively invisible to the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_AffinityGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_AffinityGroup"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new affinity group for organizing backends and models."
      }
    },
    "/groups/{id}": {
      "delete": {
        "description": "Removes an affinity group from the system.\nThis does not delete the group's backends or models, only the group relationship.\nReturns a simple \"deleted\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes an affinity group from the system."
      },
      "get": {
        "description": "Retrieves an specific affinity group by its unique ID.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_AffinityGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves an specific affinity group by its unique ID."
      },
      "parameters": [
        {
          "description": "The unique identifier of the affinity group.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing affinity group configuration.\nThe ID from the URL path overrides any ID in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_AffinityGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_AffinityGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing affinity group configuration."
      }
    },
    "/hooks/remote": {
      "get": {
        "description": "Lists remote hooks, optionally filtering by a unique name.\nReturns a list of remote hooks.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists remote hooks, optionally filtering by a unique name."
      },
      "post": {
        "description": "Creates a new remote hook configuration.\nRemote hooks allow task-chains to trigger external HTTP services during execution.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_RemoteHook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new remote hook configuration."
      }
    },
    "/hooks/remote/by-name/{name}": {
      "get": {
        "description": "Retrieves a remote hook configuration by name.\nReturns a simple \"deleted\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves a remote hook configuration by name."
      },
      "parameters": [
        {
          "description": "The unique name for the remote hook.",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/hooks/remote/{id}": {
      "delete": {
        "description": "Deletes a remote hook configuration by ID.\nReturns a simple \"deleted\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Deletes a remote hook configuration by ID."
      },
      "get": {
        "description": "Retrieves a specific remote hook configuration by ID.\nReturns a simple \"deleted\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves a specific remote hook configuration by ID."
      },
      "parameters": [
        {
          "description": "The unique identifier for the remote hook.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing remote hook configuration.\nThe ID from the URL path overrides any ID in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_RemoteHook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing remote hook configuration."
      }
    },
    "/hooks/schemas": {
      "get": {
        "description": "Retrieves the JSON openAPI schemas for all supported hook types.\nReturns a list of hook openAPI schemas.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves the JSON openAPI schemas for all supported hook types."
      }
    },
    "/model-affinity/{groupID}/models": {
      "get": {
        "description": "Lists all models associated with a specific affinity group.\nReturns basic model information without backend-specific details.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all models associated with a specific affinity group."
      },
      "parameters": [
        {
          "description": "The unique identifier of the affinity group.",
          "in": "path",
          "name": "groupID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/model-affinity/{groupID}/models/{modelID}": {
      "delete": {
        "description": "Removes a model from an affinity group.\nAfter removal, requests for this model will no longer be routed to backends in this affinity group.\nThis model can still be used with backends in other groups where it remains assigned.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a model from an affinity group."
      },
      "parameters": [
        {
          "description": "The unique identifier of the affinity group.",
          "in": "path",
          "name": "groupID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The unique identifier of the model to be assigned.",
          "in": "path",
          "name": "modelID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Associates a model with an affinity group.\nAfter assignment, requests for this model can be routed to any backend in the affinity group.\nThis enables request routing between the model and backends that share this affinity group.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Associates a model with an affinity group."
      }
    },
    "/model-affinity/{modelID}/groups": {
      "get": {
        "description": "Lists all affinity groups that a specific model belongs to.\nUseful for understanding where a model is deployed across the system.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_AffinityGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all affinity groups that a specific model belongs to."
      },
      "parameters": [
        {
          "description": "The unique identifier of the model.",
          "in": "path",
          "name": "modelID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/models": {
      "get": {
        "description": "Lists all registered models in internal format.\nThis endpoint returns full model details including timestamps and capabilities.\nIntended for administrative and debugging purposes.",
        "parameters": [
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all registered models in internal format."
      },
      "post": {
        "description": "Declares a new model to the system.\nThe model must be available in a configured backend or will be queued for download.\nIMPORTANT: Models not assigned to any group will NOT be available for request processing.\nIf groups are enabled, to make a model available to backends, it must be explicitly added to at least one group.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Model"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Declares a new model to the system."
      }
    },
    "/models/{id}": {
      "delete": {
        "description": "Deletes a model from the system registry.\n- Does not remove the model from backend storage (requires separate backend operation)\n- Accepts 'purge=true' query parameter to also remove related downloads from queue",
        "parameters": [
          {
            "description": "If true, also removes the model from the download queue and cancels any in-progress downloads.",
            "in": "query",
            "name": "purge",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Deletes a model from the system registry."
      },
      "parameters": [
        {
          "description": "The unique identifier for the model.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing model registration.\nOnly mutable fields (like capabilities and context length) can be updated.\nThe model ID cannot be changed.\nReturns the updated model configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing model registration."
      }
    },
    "/openai/v1/models": {
      "get": {
        "description": "Lists all registered models in OpenAI-compatible format.\nReturns models as they would appear in OpenAI's /v1/models endpoint.\nNOTE: Only models assigned to at least one group will be available for request processing.\nModels not assigned to any group exist in the configuration but are completely ignored by the routing system.\nthe chainID parameter is currently unused.",
        "parameters": [
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backendapi_OpenAICompatibleModelList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all registered models in OpenAI-compatible format."
      }
    },
    "/openai/{chainID}/v1/chat/completions": {
      "parameters": [
        {
          "description": "The ID of the task chain to use.",
          "in": "path",
          "name": "chainID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Processes chat requests using the configured task chain.\nThis endpoint provides OpenAI-compatible chat completions by executing\nthe configured task chain with the provided request data.\nThe task chain must be configured first using the /chat/taskchain endpoint.\n--- SSE Streaming ---\nWhen 'stream: true' is set in the request body, the endpoint streams the response\nusing Server-Sent Events (SSE) in the OpenAI-compatible format.\nClients should concatenate the 'content' from the 'delta' object in each 'data' event\nto reconstruct the full message. The stream is terminated by a 'data: [DONE]' message.\nExample event stream:\ndata: {\"id\":\"chat_123\",\"object\":\"chat.completion.chunk\",\"created\":1690000000,\"model\":\"mistral:instruct\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"finish_reason\":null}]}\ndata: {\"id\":\"chat_123\",\"object\":\"chat.completion.chunk\",\"created\":1690000000,\"model\":\"mistral:instruct\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" world\"},\"finish_reason\":null}]}\ndata: [DONE]",
        "parameters": [
          {
            "description": "If provided the stacktraces will be added to the response.",
            "in": "query",
            "name": "stackTrace",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taskengine_OpenAIChatRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/chatapi_OpenAIChatResponse"
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Processes chat requests using the configured task chain."
      }
    },
    "/openai/{chainID}/v1/models": {
      "get": {
        "description": "Lists all registered models in OpenAI-compatible format.\nReturns models as they would appear in OpenAI's /v1/models endpoint.\nNOTE: Only models assigned to at least one group will be available for request processing.\nModels not assigned to any group exist in the configuration but are completely ignored by the routing system.\nthe chainID parameter is currently unused.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backendapi_OpenAICompatibleModelList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all registered models in OpenAI-compatible format."
      },
      "parameters": [
        {
          "description": "The ID of the chain that links to the openAI completion API. Currently unused.",
          "in": "path",
          "name": "chainID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/providers/configs": {
      "get": {
        "description": "Lists all configured external providers with pagination support.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimestate_ProviderConfig"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all configured external providers with pagination support."
      }
    },
    "/providers/{providerType}/config": {
      "delete": {
        "description": "Removes provider configuration from the system.\nAfter deletion, the provider will no longer be available for model execution.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes provider configuration from the system."
      },
      "get": {
        "description": "Retrieves configuration details for a specific external provider.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimestate_ProviderConfig"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves configuration details for a specific external provider."
      },
      "parameters": [
        {
          "description": "The type of the provider to delete (e.g., 'openai', 'gemini').",
          "in": "path",
          "name": "providerType",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/queue": {
      "get": {
        "description": "Retrieves the current model download queue state.\nReturns a list of models waiting to be downloaded.\nDownloading models is only supported for ollama backends.\nIf groups are enabled, models will only be downloaded to backends\nthat are associated with at least one group.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_downloadservice_Job"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves the current model download queue state."
      }
    },
    "/queue/cancel": {
      "delete": {
        "description": "Cancels an in-progress model download.\nAccepts either:\n- 'url' query parameter to cancel a download on a specific backend\n- 'model' query parameter to cancel the model download across all backends\nExample: /queue/cancel?url=http://localhost:11434\n/queue/cancel?model=mistral:latest",
        "parameters": [
          {
            "description": "The model name to cancel downloads for across all backends.",
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The base URL of a specific backend to cancel downloads on.",
            "in": "query",
            "name": "url",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Cancels an in-progress model download."
      }
    },
    "/queue/inProgress": {
      "get": {
        "description": "Streams real-time download progress via Server-Sent Events (SSE).\nClients should handle 'data' events containing JSON status updates.\nConnection remains open until client disconnects or server closes.\nExample event format:\nevent: status\ndata: {\"status\":\"downloading\",\"digest\":\"sha256:abc123\",\"total\":1000000,\"completed\":250000,\"model\":\"mistral:latest\",\"baseUrl\":\"http://localhost:11434\"}",
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Streams real-time download progress via Server-Sent Events (SSE)."
      }
    },
    "/queue/{model}": {
      "delete": {
        "description": "Removes a model from the download queue.\nIf a model download is in progress or the download will be cancelled.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a model from the download queue."
      },
      "parameters": [
        {
          "description": "The name of the model to remove from the queue (e.g., 'mistral:latest').",
          "in": "path",
          "name": "model",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/state": {
      "get": {
        "description": "Retrieves the current runtime state of all LLM backends.\nIncludes connection status, loaded models, and error information.\nNOTE: This shows the physical state of backends, but the routing system only considers\nbackends and models that are assigned to the same group. Resources not in groups are ignored\nfor request processing even if they appear in this response.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_statetype_BackendRuntimeState"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves the current runtime state of all LLM backends."
      }
    },
    "/supported": {
      "get": {
        "description": "Lists available task-chain hook types.\nReturns all registered external action types that can be used in task-chain hooks.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists available task-chain hook types."
      }
    },
    "/taskchains": {
      "get": {
        "description": "Lists all task chain definitions with pagination.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_taskengine_TaskChainDefinition"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all task chain definitions with pagination."
      },
      "post": {
        "description": "Creates a new task chain definition.\nThe task chain is stored in the system's KV store for later execution.\nTask chains define workflows with conditional branches, external hooks, and captured execution state.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taskengine_TaskChainDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taskengine_TaskChainDefinition"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new task chain definition."
      }
    },
    "/taskchains/{id}": {
      "delete": {
        "description": "Deletes a task chain definition.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Deletes a task chain definition."
      },
      "get": {
        "description": "Retrieves a specific task chain by ID.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taskengine_TaskChainDefinition"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves a specific task chain by ID."
      },
      "parameters": [
        {
          "description": "The unique identifier for the task chain.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing task chain definition.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taskengine_TaskChainDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taskengine_TaskChainDefinition"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing task chain definition."
      }
    },
    "/tasks": {
      "post": {
        "description": "Executes dynamic task-chain workflows.\nTask-chains are state-machine workflows (DAGs) with conditional branches,\nexternal hooks, and captured execution state.\nRequests are routed ONLY to backends that have the requested model available in any shared group.\nIf groups are enabled, models and backends not assigned to any group will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execapi_taskExecutionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_taskExecutionResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Executes dynamic task-chain workflows."
      }
    }
  },
  "security": [
    {
      "X-API-Key": []
    }
  ]
}