{
  "components": {
    "schemas": {
      "array_backendapi_respBackendList": {
        "items": {
          "$ref": "#/components/schemas/backendapi_respBackendList"
        },
        "type": "array"
      },
      "array_downloadservice_Job": {
        "items": {
          "$ref": "#/components/schemas/downloadservice_Job"
        },
        "type": "array"
      },
      "array_runtimestate_LLMState": {
        "items": {
          "$ref": "#/components/schemas/runtimestate_LLMState"
        },
        "type": "array"
      },
      "array_runtimestate_ProviderConfig": {
        "items": {
          "$ref": "#/components/schemas/runtimestate_ProviderConfig"
        },
        "type": "array"
      },
      "array_runtimetypes_Backend": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_Backend"
        },
        "type": "array"
      },
      "array_runtimetypes_Model": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_Model"
        },
        "type": "array"
      },
      "array_runtimetypes_Pool": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_Pool"
        },
        "type": "array"
      },
      "array_runtimetypes_RemoteHook": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_RemoteHook"
        },
        "type": "array"
      },
      "array_string": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "backendapi_ListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/backendapi_OpenAIModel"
            },
            "type": "array"
          },
          "object": {
            "example": "list",
            "type": "string"
          }
        },
        "required": [
          "object",
          "data"
        ],
        "type": "object"
      },
      "backendapi_OpenAIModel": {
        "properties": {
          "created": {
            "example": "1717020800",
            "type": "integer"
          },
          "id": {
            "example": "mistral:latest",
            "type": "string"
          },
          "object": {
            "example": "model",
            "type": "string"
          },
          "owned_by": {
            "example": "system",
            "type": "string"
          }
        },
        "required": [
          "id",
          "object",
          "created",
          "owned_by"
        ],
        "type": "object"
      },
      "backendapi_respBackend": {
        "properties": {
          "baseUrl": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "models": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "pulledModels": {
            "items": {
              "$ref": "#/components/schemas/runtimestate_ListModelResponse"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "models",
          "pulledModels",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "backendapi_respBackendList": {
        "properties": {
          "baseUrl": {
            "example": "http://localhost:11434",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "error": {
            "example": "error-message",
            "type": "string"
          },
          "id": {
            "example": "backend-id",
            "type": "string"
          },
          "models": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "backend-name",
            "type": "string"
          },
          "pulledModels": {
            "items": {
              "$ref": "#/components/schemas/runtimestate_ListModelResponse"
            },
            "type": "array"
          },
          "type": {
            "example": "ollama",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "models",
          "pulledModels",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "downloadservice_Job": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modelJob": {
            "type": "object"
          },
          "scheduledFor": {
            "type": "integer"
          },
          "taskType": {
            "type": "string"
          },
          "validUntil": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "taskType",
          "modelJob",
          "scheduledFor",
          "validUntil",
          "createdAt"
        ],
        "type": "object"
      },
      "execapi_DefaultModelResponse": {
        "properties": {
          "modelName": {
            "example": "mistral:latest",
            "type": "string"
          }
        },
        "required": [
          "modelName"
        ],
        "type": "object"
      },
      "execapi_EmbedRequest": {
        "properties": {
          "text": {
            "example": "Hello, world!",
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "execapi_EmbedResponse": {
        "properties": {
          "vector": {
            "example": "[0.1, 0.2, 0.3, ...]",
            "items": {
              "type": "number"
            },
            "type": "array"
          }
        },
        "required": [
          "vector"
        ],
        "type": "object"
      },
      "execapi_taskExec": {
        "properties": {
          "chain": {},
          "input": {
            "type": "object"
          },
          "inputType": {
            "type": "string"
          }
        },
        "required": [
          "input",
          "inputType",
          "chain"
        ],
        "type": "object"
      },
      "execapi_taskResponse": {
        "properties": {
          "output": {
            "type": "object"
          },
          "outputType": {
            "type": "string"
          },
          "state": {
            "items": {
              "$ref": "#/components/schemas/taskengine_CapturedStateUnit"
            },
            "type": "array"
          }
        },
        "required": [
          "output",
          "outputType",
          "state"
        ],
        "type": "object"
      },
      "execservice_TaskRequest": {
        "properties": {
          "prompt": {
            "example": "Hello, how are you?",
            "type": "string"
          }
        },
        "required": [
          "prompt"
        ],
        "type": "object"
      },
      "execservice_TaskResponse": {
        "properties": {
          "id": {
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "type": "string"
          },
          "response": {
            "example": "I'm doing well, thank you!",
            "type": "string"
          }
        },
        "required": [
          "id",
          "response"
        ],
        "type": "object"
      },
      "runtimestate_LLMState": {
        "properties": {
          "apiKey": {
            "description": "APIKey stores the API key used for authentication with the backend.",
            "type": "string"
          },
          "backend": {
            "type": "object"
          },
          "error": {
            "description": "Error stores a description of the last encountered error when\ninteracting with or reconciling this backend's state, if any.",
            "type": "string"
          },
          "id": {
            "example": "backend1",
            "type": "string"
          },
          "models": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "Backend Name",
            "type": "string"
          },
          "pulledModels": {
            "items": {
              "$ref": "#/components/schemas/runtimestate_ListModelResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "models",
          "pulledModels",
          "backend",
          ""
        ],
        "type": "object"
      },
      "runtimestate_ListModelResponse": {
        "properties": {
          "canChat": {
            "type": "boolean"
          },
          "canEmbed": {
            "type": "boolean"
          },
          "canPrompt": {
            "type": "boolean"
          },
          "canStream": {
            "type": "boolean"
          },
          "contextLength": {
            "type": "integer"
          },
          "details": {
            "type": "object"
          },
          "digest": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "modifiedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "model",
          "modifiedAt",
          "size",
          "digest",
          "details",
          "contextLength",
          "canChat",
          "canEmbed",
          "canPrompt",
          "canStream"
        ],
        "type": "object"
      },
      "runtimestate_ProviderConfig": {
        "properties": {
          "APIKey": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "required": [
          "",
          ""
        ],
        "type": "object"
      },
      "runtimetypes_Backend": {
        "properties": {
          "baseUrl": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_Model": {
        "properties": {
          "canChat": {
            "type": "boolean"
          },
          "canEmbed": {
            "type": "boolean"
          },
          "canPrompt": {
            "description": "TODO: Implement the forms for this",
            "type": "boolean"
          },
          "canStream": {
            "type": "boolean"
          },
          "contextLength": {
            "type": "integer"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "model",
          "contextLength",
          "canChat",
          "canEmbed",
          "canPrompt",
          "canStream",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_Pool": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "purposeType": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "purposeType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_RemoteHook": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "endpointUrl": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timeoutMs": {
            "type": "integer"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "endpointUrl",
          "method",
          "timeoutMs",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "taskengine_CapturedStateUnit": {
        "properties": {
          "duration": {
            "type": "object"
          },
          "error": {
            "type": "object"
          },
          "input": {
            "type": "string"
          },
          "inputType": {
            "type": "object"
          },
          "output": {
            "type": "string"
          },
          "outputType": {
            "type": "object"
          },
          "taskHandler": {
            "type": "string"
          },
          "taskID": {
            "type": "string"
          },
          "transition": {
            "type": "string"
          }
        },
        "required": [
          "taskID",
          "taskHandler",
          "inputType",
          "outputType",
          "transition",
          "duration",
          "error",
          "input",
          "output"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "X-API-Key": {
        "in": "header",
        "name": "X-API-Key",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "contenox/runtime – LLM Backend Management API",
    "version": "v0.0.49"
  },
  "openapi": "3.1.0",
  "paths": {
    "/backend-associations/{backendID}/pools": {
      "get": {
        "description": "Lists all pools that a specific backend belongs to.\nUseful for understanding which model sets a backend has access to.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "listPoolsForBackend"
      },
      "parameters": [
        {
          "in": "path",
          "name": "backendID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/backend-associations/{poolID}/backends": {
      "get": {
        "description": "Lists all backends associated with a specific pool.\nReturns basic backend information without runtime state.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "listBackends"
      },
      "parameters": [
        {
          "in": "path",
          "name": "poolID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/backend-associations/{poolID}/backends/{backendID}": {
      "delete": {
        "description": "Removes a backend from a pool.\nAfter removal, the backend will no longer be eligible to process requests for models in this pool.\nRequests requiring models from this pool will no longer be routed to this backend.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "removeBackend"
      },
      "parameters": [
        {
          "in": "path",
          "name": "poolID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "backendID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Associates a backend with a pool.\nAfter assignment, the backend can process requests for all models in the pool.\nThis enables request routing between the backend and models that share this pool.",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "assignBackend"
      }
    },
    "/backends": {
      "get": {
        "description": "Lists all configured backend connections with runtime status.\nNOTE: Only backends assigned to at least one pool will be used for request processing.\nBackends not assigned to any pool exist in the configuration but are completely ignored by the routing system.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_backendapi_respBackendList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "list"
      },
      "post": {
        "description": "Creates a new backend connection to an LLM provider.\nBackends represent connections to LLM services (e.g., Ollama, OpenAI) that can host models.\nNote: Creating a backend will be provisioned on the next synchronization cycle.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Backend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Backend"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "create"
      }
    },
    "/backends/{id}": {
      "delete": {
        "description": "Removes a backend connection.\nThis does not delete models from the remote provider, only removes the connection.\nReturns a simple \"backend removed\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "delete"
      },
      "get": {
        "description": "Retrieves complete information for a specific backend",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backendapi_respBackend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "get"
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing backend configuration.\nThe ID from the URL path overrides any ID in the request body.\nNote: Updating a backend will be provisioned on the next synchronization cycle.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Backend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "update"
      }
    },
    "/defaultmodel": {
      "get": {
        "description": "Returns the default model configured during system initialization.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_DefaultModelResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "defaultModel"
      }
    },
    "/embed": {
      "post": {
        "description": "Generates vector embeddings for text.\nUses the system's default embedding model configured at startup.\nRequests are routed ONLY to backends that have the default model available in any shared pool.\nIf pools are enabled, models and backends not assigned to any pool will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execapi_EmbedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_EmbedResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "embed"
      }
    },
    "/execute": {
      "post": {
        "description": "Runs the prompt through the default LLM.\nThis endpoint provides basic chat completion optimized for machine-to-machine (M2M) communication.\nRequests are routed ONLY to backends that have the default model available in any shared pool.\nIf pools are enabled, models and backends not assigned to any pool will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execservice_TaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execservice_TaskResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "execute"
      }
    },
    "/hooks/remote": {
      "get": {
        "description": "Lists all configured remote hooks with pagination support.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "list"
      },
      "post": {
        "description": "Creates a new remote hook configuration.\nRemote hooks allow task-chains to trigger external HTTP services during execution.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_RemoteHook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "create"
      }
    },
    "/hooks/remote/{id}": {
      "delete": {
        "description": "Deletes a remote hook configuration by ID.\nReturns a simple \"deleted\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "delete"
      },
      "get": {
        "description": "Retrieves a specific remote hook configuration by ID.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "get"
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing remote hook configuration.\nThe ID from the URL path overrides any ID in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_RemoteHook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "update"
      }
    },
    "/internal/models": {
      "get": {
        "description": "Lists all registered models in internal format.\nThis endpoint returns full model details including timestamps and capabilities.\nIntended for administrative and debugging purposes.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_*runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "listInternal"
      }
    },
    "/model-associations/{modelID}/pools": {
      "get": {
        "description": "Lists all pools that a specific model belongs to.\nUseful for understanding where a model is deployed across the system.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "listPoolsForModel"
      },
      "parameters": [
        {
          "in": "path",
          "name": "modelID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/model-associations/{poolID}/models": {
      "get": {
        "description": "Lists all models associated with a specific pool.\nReturns basic model information without backend-specific details.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "listModels"
      },
      "parameters": [
        {
          "in": "path",
          "name": "poolID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/model-associations/{poolID}/models/{modelID}": {
      "delete": {
        "description": "Removes a model from a pool.\nAfter removal, requests for this model will no longer be routed to backends in this pool.\nThis model can still be used with backends in other pools where it remains assigned.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "removeModel"
      },
      "parameters": [
        {
          "in": "path",
          "name": "poolID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "modelID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Associates a model with a pool.\nAfter assignment, requests for this model can be routed to any backend in the pool.\nThis enables request routing between the model and backends that share this pool.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "assignModel"
      }
    },
    "/models": {
      "get": {
        "description": "Lists all registered models in OpenAI-compatible format.\nReturns models as they would appear in OpenAI's /v1/models endpoint.\nNOTE: Only models assigned to at least one pool will be available for request processing.\nModels not assigned to any pool exist in the configuration but are completely ignored by the routing system.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backendapi_ListResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "list"
      },
      "post": {
        "description": "Declares a new model to the system.\nThe model must be available in a configured backend or will be queued for download.\nIMPORTANT: Models not assigned to any pool will NOT be available for request processing.\nIf pools are enabled, to make a model available to backends, it must be explicitly added to at least one pool.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Model"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "append"
      }
    },
    "/models/{id}": {
      "delete": {
        "description": "Deletes a model from the system registry.\n- Does not remove the model from backend storage (requires separate backend operation)\n- Accepts 'purge=true' query parameter to also remove related downloads from queue",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "delete"
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing model registration.\nOnly mutable fields (like capabilities and context length) can be updated.\nThe model ID cannot be changed.\nReturns the updated model configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "update"
      }
    },
    "/pool-by-name/{name}": {
      "get": {
        "description": "Retrieves a pool by its human-readable name.\nUseful for configuration where ID might not be known but name is consistent.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "getByName"
      },
      "parameters": [
        {
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/pool-by-purpose/{purpose}": {
      "get": {
        "description": "Lists pools filtered by purpose type with pagination support.\nPurpose types categorize pools (e.g., \"Internal Embeddings\", \"Internal Tasks\").\nAccepts 'cursor' (RFC3339Nano timestamp) and 'limit' parameters for pagination.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "listByPurpose"
      },
      "parameters": [
        {
          "in": "path",
          "name": "purpose",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/pools": {
      "get": {
        "description": "Lists all resource pools in the system.\nReturns basic pool information without associated backends or models.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "listAll"
      },
      "post": {
        "description": "Creates a new resource pool for organizing backends and models.\nPool names must be unique within the system.\nPools allow grouping of backends and models for specific operational purposes (e.g., embeddings, tasks).\nCRITICAL BEHAVIOR:\nWhen pools are configured in the system, request routing ONLY considers resources that share a pool.\n- Models not assigned to any pool will NOT be available for execution\n- Backends not assigned to any pool will NOT receive models or process requests\n- Resources must be explicitly associated with the same pool to work together\nThis is a fundamental operational requirement - resources outside pools are effectively invisible to the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Pool"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Pool"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "create"
      }
    },
    "/pools/{id}": {
      "delete": {
        "description": "Removes a pool from the system.\nThis does not delete associated backends or models, only the pool relationship.\nReturns a simple \"deleted\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "delete"
      },
      "get": {
        "description": "Retrieves a specific pool by its unique ID.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "getByID"
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing pool configuration.\nThe ID from the URL path overrides any ID in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Pool"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "update"
      }
    },
    "/providers/configs": {
      "get": {
        "description": "Lists all configured external providers with pagination support.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimestate_ProviderConfig"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "listConfigs"
      }
    },
    "/providers/{providerType}/config": {
      "delete": {
        "description": "Removes provider configuration from the system.\nAfter deletion, the provider will no longer be available for model execution.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "deleteConfig"
      },
      "get": {
        "description": "Retrieves configuration details for a specific external provider.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimestate_ProviderConfig"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "get"
      },
      "parameters": [
        {
          "in": "path",
          "name": "providerType",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/queue": {
      "get": {
        "description": "Retrieves the current model download queue state.\nReturns a list of models waiting to be downloaded.\nDownloading models is only supported for ollama backends.\nIf pools are enabled, models will only be downloaded to backends\nthat are associated with at least one pool.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_downloadservice_Job"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "getQueue"
      }
    },
    "/queue/cancel": {
      "delete": {
        "description": "Cancels an in-progress model download.\nAccepts either:\n- 'url' query parameter to cancel a download on a specific backend\n- 'model' query parameter to cancel the model download across all backends\nExample: /queue/cancel?url=http://localhost:11434\n/queue/cancel?model=mistral:latest",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "cancelDownload"
      }
    },
    "/queue/inProgress": {
      "get": {
        "description": "Streams real-time download progress via Server-Sent Events (SSE).\nClients should handle 'data' events containing JSON status updates.\nConnection remains open until client disconnects or server closes.\nExample event format:\nevent: status\ndata: {\"status\":\"downloading\",\"digest\":\"sha256:abc123\",\"total\":1000000,\"completed\":250000,\"model\":\"mistral:latest\",\"baseUrl\":\"http://localhost:11434\"}",
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Server-Sent Events stream"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "inProgress"
      }
    },
    "/queue/{model}": {
      "delete": {
        "description": "Removes a model from the download queue.\nIf a model download is in progress or the download will be cancelled.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "removeFromQueue"
      },
      "parameters": [
        {
          "in": "path",
          "name": "model",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/state": {
      "get": {
        "description": "Retrieves the current runtime state of all LLM backends.\nIncludes connection status, loaded models, and error information.\nNOTE: This shows the physical state of backends, but the routing system only considers\nbackends and models that are assigned to the same pool. Resources not in pools are ignored\nfor request processing even if they appear in this response.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimestate_LLMState"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "list"
      }
    },
    "/supported": {
      "get": {
        "description": "Lists available task-chain hook types.\nReturns all registered external action types that can be used in task-chain hooks.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "supported"
      }
    },
    "/tasks": {
      "post": {
        "description": "Executes dynamic task-chain workflows.\nTask-chains are state-machine workflows (DAGs) with conditional branches,\nexternal hooks, and captured execution state.\nRequests are routed ONLY to backends that have the requested model available in any shared pool.\nIf pools are enabled, models and backends not assigned to any pool will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execapi_taskExec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_taskResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "tasks"
      }
    }
  },
  "security": [
    {
      "X-API-Key": []
    }
  ]
}