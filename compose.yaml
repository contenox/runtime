version: "3.8"

services:
  # Core kernel runtime
  runtime:
    image: ghcr.io/contenox/runtime-api:v0.0.55
    container_name: contenox-runtime
    #env_file: .env
    environment:
      - DATABASE_URL=postgres://username:password@postgres-kernel:5432/postgres?sslmode=disable
      - PORT=8080
      - TOKENIZER_SERVICE_URL=http://tokenizer:50051
      - EMBED_MODEL=nomic-embed-text:latest
      - EMBED_MODEL_CONTEXT_LENGTH=2048
      - TASK_MODEL=phi4-mini:3.8b
      - TASK_MODEL_CONTEXT_LENGTH=2048
      - KV_HOST=valkey:6379
      - NATS_URL=nats://natsuser:natspassword@nats:4222
      - NATS_USER=natsuser
      - NATS_PASSWORD=natspassword
    depends_on:
      postgres-kernel:
        condition: service_healthy
      nats:
        condition: service_started
    ports:
      - "8083:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8080/health || exit 1"]
      interval: 1s
      timeout: 1s
      retries: 30

  # API Gateway
  gateway:
    build:
      context: ./
      dockerfile: Dockerfile.gateway
    container_name: contenox-gateway
    env_file: .env
    depends_on:
      postgres-mvp:
        condition: service_healthy
      nats:
        condition: service_started
      runtime:
        condition: service_healthy
    ports:
      - "8081:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8080/api/health || exit 1"]
      interval: 1s
      timeout: 1s
      retries: 30
  tokenizer:
    image: ghcr.io/contenox/ollamatokenizer-api:v0.0.7
    container_name: contenox-tokenizer
    environment:
      - PRELOAD_MODELS=granite-embedding-30m,tiny
      - TOKENIZER_TIMEOUT=30s
      - FALLBACK_MODEL=granite-embedding-30m
      - USE_DEFAULT_URLS=true
      - ADDR=:50051
    ports:
      - "50051:50051"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:50051/healthz"]
      interval: 5s
      timeout: 3s
      retries: 5

  vald:
    build:
      context: ./
      dockerfile: Dockerfile.vald
    ports:
      - "8084:8081"

  postgres-kernel:
    image: postgres:17-bookworm
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U username"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Dedicated MVP database (NO HOST PORT CONFLICT)
  postgres-mvp:
    image: postgres:17-bookworm
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U username"]
      interval: 5s
      timeout: 5s
      retries: 10

  nats:
    image: nats:latest
    command: "-js"
    ports:
      - "4222:4222"
      - "8222:8222"
    environment:
      - NATS_USER=natsuser
      - NATS_PASSWORD=natspassword

  text-worker:
    build:
      context: ./
      dockerfile: Dockerfile.worker
    depends_on:
      gateway:
        condition: service_healthy
    environment:
      API_BASE_URL: http://gateway:8080/api
      WORKER_TYPE: plaintext
      WORKER_EMAIL: worker@example.com
      WORKER_PASSWORD: workerpassword
      WORKER_LEASER_ID: Text Worker 1
      WORKER_LEASE_DURATION_SECONDS: 30
      WORKER_REQUEST_TIMEOUT_SECONDS: 2

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11435:11434"
    volumes:
      - ollama-data:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10

  valkey:
    image: valkey/valkey:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 50

volumes:
  ollama-data:
