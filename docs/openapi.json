{
  "components": {
    "schemas": {
      "ErrorResponse": {
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "array_backendapi_backendSummary": {
        "items": {
          "$ref": "#/components/schemas/backendapi_backendSummary"
        },
        "type": "array"
      },
      "array_downloadservice_Job": {
        "items": {
          "$ref": "#/components/schemas/downloadservice_Job"
        },
        "type": "array"
      },
      "array_runtimestate_ProviderConfig": {
        "items": {
          "$ref": "#/components/schemas/runtimestate_ProviderConfig"
        },
        "type": "array"
      },
      "array_runtimetypes_Backend": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_Backend"
        },
        "type": "array"
      },
      "array_runtimetypes_Model": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_Model"
        },
        "type": "array"
      },
      "array_runtimetypes_Pool": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_Pool"
        },
        "type": "array"
      },
      "array_runtimetypes_RemoteHook": {
        "items": {
          "$ref": "#/components/schemas/runtimetypes_RemoteHook"
        },
        "type": "array"
      },
      "array_statetype_BackendRuntimeState": {
        "items": {
          "$ref": "#/components/schemas/statetype_BackendRuntimeState"
        },
        "type": "array"
      },
      "array_string": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "backendapi_OpenAICompatibleModelList": {
        "properties": {
          "data": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "object": {
            "example": "list",
            "type": "string"
          }
        },
        "required": [
          "object",
          "data"
        ],
        "type": "object"
      },
      "backendapi_backendDetails": {
        "properties": {
          "baseUrl": {
            "example": "http://ollama-prod.internal:11434",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "error": {
            "example": "connection timeout: context deadline exceeded",
            "type": "string"
          },
          "id": {
            "example": "b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e",
            "type": "string"
          },
          "models": {
            "example": "[\\\"mistral:instruct\\\", \\\"llama2:7b\\\", \\\"nomic-embed-text:latest\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "ollama-production",
            "type": "string"
          },
          "pulledModels": {
            "$ref": "#/components/schemas/statetype_ModelPullStatus"
          },
          "type": {
            "example": "ollama",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "models",
          "pulledModels",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "backendapi_backendSummary": {
        "properties": {
          "baseUrl": {
            "example": "http://localhost:11434",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "error": {
            "example": "error-message",
            "type": "string"
          },
          "id": {
            "example": "backend-id",
            "type": "string"
          },
          "models": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "backend-name",
            "type": "string"
          },
          "pulledModels": {
            "$ref": "#/components/schemas/statetype_ModelPullStatus"
          },
          "type": {
            "example": "ollama",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "models",
          "pulledModels",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "downloadservice_Job": {
        "properties": {
          "createdAt": {
            "example": "2021-09-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "1234567890",
            "type": "string"
          },
          "modelJob": {
            "$ref": "#/components/schemas/runtimetypes_QueueItem"
          },
          "scheduledFor": {
            "example": 1630483200,
            "type": "integer"
          },
          "taskType": {
            "example": "model_download",
            "type": "string"
          },
          "validUntil": {
            "example": 1630483200,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "taskType",
          "modelJob",
          "scheduledFor",
          "validUntil",
          "createdAt"
        ],
        "type": "object"
      },
      "execapi_DefaultModelResponse": {
        "properties": {
          "modelName": {
            "example": "mistral:latest",
            "type": "string"
          }
        },
        "required": [
          "modelName"
        ],
        "type": "object"
      },
      "execapi_EmbedRequest": {
        "properties": {
          "text": {
            "example": "Hello, world!",
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "execapi_EmbedResponse": {
        "properties": {
          "vector": {
            "example": "[0.1, 0.2, 0.3, ...]",
            "items": {
              "type": "number"
            },
            "type": "array"
          }
        },
        "required": [
          "vector"
        ],
        "type": "object"
      },
      "execapi_taskExecutionRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/taskengine_TaskChainDefinition"
          },
          "input": {
            "$ref": "#/components/schemas/object"
          },
          "inputType": {
            "example": "string",
            "type": "string"
          }
        },
        "required": [
          "input",
          "inputType",
          "chain"
        ],
        "type": "object"
      },
      "execapi_taskExecutionResponse": {
        "properties": {
          "output": {
            "$ref": "#/components/schemas/object"
          },
          "outputType": {
            "example": "string",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/taskengine_CapturedStateUnit"
          }
        },
        "required": [
          "output",
          "outputType",
          "state"
        ],
        "type": "object"
      },
      "execservice_SimpleExecutionResponse": {
        "properties": {
          "id": {
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "type": "string"
          },
          "response": {
            "example": "I'm doing well, thank you!",
            "type": "string"
          }
        },
        "required": [
          "id",
          "response"
        ],
        "type": "object"
      },
      "execservice_TaskRequest": {
        "properties": {
          "model_name": {
            "example": "gpt-3.5-turbo",
            "type": "string"
          },
          "model_provider": {
            "example": "openai",
            "type": "string"
          },
          "prompt": {
            "example": "Hello, how are you?",
            "type": "string"
          }
        },
        "required": [
          "prompt",
          "model_name",
          "model_provider"
        ],
        "type": "object"
      },
      "runtimestate_ProviderConfig": {
        "properties": {
          "APIKey": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "required": [
          "APIKey",
          "Type"
        ],
        "type": "object"
      },
      "runtimetypes_Backend": {
        "properties": {
          "baseUrl": {
            "example": "http://ollama-prod.internal:11434",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e",
            "type": "string"
          },
          "name": {
            "example": "ollama-production",
            "type": "string"
          },
          "type": {
            "example": "ollama",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "baseUrl",
          "type",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_Model": {
        "properties": {
          "canChat": {
            "example": true,
            "type": "boolean"
          },
          "canEmbed": {
            "example": false,
            "type": "boolean"
          },
          "canPrompt": {
            "example": true,
            "type": "boolean"
          },
          "canStream": {
            "example": true,
            "type": "boolean"
          },
          "contextLength": {
            "example": 8192,
            "type": "integer"
          },
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "m7d8e9f0a-1b2c-3d4e-5f6a-7b8c9d0e1f2a",
            "type": "string"
          },
          "model": {
            "example": "mistral:instruct",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "model",
          "contextLength",
          "canChat",
          "canEmbed",
          "canPrompt",
          "canStream",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_Pool": {
        "properties": {
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "p9a8b7c6-d5e4-f3a2-b1c0-d9e8f7a6b5c4",
            "type": "string"
          },
          "name": {
            "example": "production-chat",
            "type": "string"
          },
          "purposeType": {
            "example": "Internal Tasks",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "purposeType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "runtimetypes_QueueItem": {
        "properties": {
          "model": {
            "example": "llama2:latest",
            "type": "string"
          },
          "url": {
            "example": "http://ollama-prod.internal:11434",
            "type": "string"
          }
        },
        "required": [
          "url",
          "model"
        ],
        "type": "object"
      },
      "runtimetypes_RemoteHook": {
        "properties": {
          "createdAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "endpointUrl": {
            "example": "http://hooks-endpoint:port",
            "type": "string"
          },
          "id": {
            "example": "h1a2b3c4-d5e6-f7g8-h9i0-j1k2l3m4n5o6",
            "type": "string"
          },
          "method": {
            "example": "POST",
            "type": "string"
          },
          "name": {
            "example": "send-email",
            "type": "string"
          },
          "timeoutMs": {
            "example": 5000,
            "type": "integer"
          },
          "updatedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "endpointUrl",
          "method",
          "timeoutMs",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "statetype_BackendRuntimeState": {
        "properties": {
          "backend": {
            "$ref": "#/components/schemas/runtimetypes_Backend"
          },
          "error": {
            "description": "Error stores a description of the last encountered error when\ninteracting with or reconciling this backend's state, if any.",
            "example": "connection timeout: context deadline exceeded",
            "type": "string"
          },
          "id": {
            "example": "b7d9e1a3-8f0c-4a7d-9b1e-2f3a4b5c6d7e",
            "type": "string"
          },
          "models": {
            "example": "[\\\"mistral:instruct\\\", \\\"llama2:7b\\\", \\\"nomic-embed-text:latest\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "ollama-production",
            "type": "string"
          },
          "pulledModels": {
            "$ref": "#/components/schemas/statetype_ModelPullStatus"
          }
        },
        "required": [
          "id",
          "name",
          "models",
          "pulledModels",
          "backend"
        ],
        "type": "object"
      },
      "statetype_ModelDetails": {
        "properties": {
          "families": {
            "example": "[\\\"Mistral\\\", \\\"7B\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "family": {
            "example": "Mistral",
            "type": "string"
          },
          "format": {
            "example": "gguf",
            "type": "string"
          },
          "parameterSize": {
            "example": "7B",
            "type": "string"
          },
          "parentModel": {
            "example": "mistral:7b",
            "type": "string"
          },
          "quantizationLevel": {
            "example": "Q4_K_M",
            "type": "string"
          }
        },
        "required": [
          "parentModel",
          "format",
          "family",
          "families",
          "parameterSize",
          "quantizationLevel"
        ],
        "type": "object"
      },
      "statetype_ModelPullStatus": {
        "properties": {
          "canChat": {
            "example": true,
            "type": "boolean"
          },
          "canEmbed": {
            "example": false,
            "type": "boolean"
          },
          "canPrompt": {
            "example": true,
            "type": "boolean"
          },
          "canStream": {
            "example": true,
            "type": "boolean"
          },
          "contextLength": {
            "example": 4096,
            "type": "integer"
          },
          "details": {
            "$ref": "#/components/schemas/statetype_ModelDetails"
          },
          "digest": {
            "example": "sha256:9e3a6c0d3b5e7f8a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a",
            "type": "string"
          },
          "model": {
            "example": "mistral:instruct",
            "type": "string"
          },
          "modifiedAt": {
            "example": "2023-11-15T14:30:45Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "Mistral 7B Instruct",
            "type": "string"
          },
          "size": {
            "example": 4709611008,
            "type": "integer"
          }
        },
        "required": [
          "name",
          "model",
          "modifiedAt",
          "size",
          "digest",
          "details",
          "contextLength",
          "canChat",
          "canEmbed",
          "canPrompt",
          "canStream"
        ],
        "type": "object"
      },
      "taskengine_CapturedStateUnit": {
        "properties": {
          "duration": {
            "description": "in nanoseconds",
            "example": 452000000,
            "format": "nanoseconds",
            "type": "integer"
          },
          "error": {
            "$ref": "#/components/schemas/taskengine_ErrorResponse"
          },
          "input": {
            "example": "This is a test input that needs validation",
            "type": "string"
          },
          "inputType": {
            "example": "string",
            "type": "string"
          },
          "output": {
            "example": "valid",
            "type": "string"
          },
          "outputType": {
            "example": "string",
            "type": "string"
          },
          "taskHandler": {
            "example": "condition_key",
            "type": "string"
          },
          "taskID": {
            "example": "validate_input",
            "type": "string"
          },
          "transition": {
            "example": "valid_input",
            "type": "string"
          }
        },
        "required": [
          "taskID",
          "taskHandler",
          "inputType",
          "outputType",
          "transition",
          "duration",
          "error",
          "input",
          "output"
        ],
        "type": "object"
      },
      "taskengine_ComposeTask": {
        "properties": {
          "strategy": {
            "description": "Strategy defines how values should be merged (\"override\", \"merge_chat_histories\", \"append_string_to_chat_history\").\nOptional; defaults to \"override\" or \"merge_chat_histories\" if both output and WithVar values are ChatHistory.\n\"merge_chat_histories\": If both output and WithVar values are ChatHistory,\nappends the WithVar's Messages to the output's Messages.",
            "type": "string"
          },
          "with_var": {
            "description": "Selects the variable to compose the current input with.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "taskengine_ErrorResponse": {
        "properties": {
          "error": {
            "example": "validation failed: input contains prohibited content",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "taskengine_HookCall": {
        "properties": {
          "args": {
            "additionalProperties": true,
            "description": "Args are key-value pairs to parameterize the hook call.\nExample: {\"to\": \"user@example.com\", \"subject\": \"Notification\"}",
            "example": "{\\\"channel\\\": \\\"#alerts\\\", \\\"message\\\": \\\"Task completed successfully\\\"}",
            "type": "object"
          },
          "name": {
            "description": "Name is the registered hook name to invoke (e.g., \"send_email\").",
            "example": "slack_notification",
            "type": "string"
          }
        },
        "required": [
          "name",
          "args"
        ],
        "type": "object"
      },
      "taskengine_LLMExecutionConfig": {
        "properties": {
          "model": {
            "example": "mistral:instruct",
            "type": "string"
          },
          "models": {
            "example": "[\\\"gpt-4\\\", \\\"gpt-3.5-turbo\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "provider": {
            "example": "ollama",
            "type": "string"
          },
          "providers": {
            "example": "[\\\"ollama\\\", \\\"openai\\\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "temperature": {
            "example": 0.7,
            "type": "number"
          }
        },
        "required": [
          "model"
        ],
        "type": "object"
      },
      "taskengine_TaskChainDefinition": {
        "properties": {
          "debug": {
            "description": "Enables capturing user input and output.",
            "type": "boolean"
          },
          "description": {
            "description": "Description provides a human-readable summary of the chain's purpose.",
            "type": "string"
          },
          "id": {
            "description": "ID uniquely identifies the chain.",
            "type": "string"
          },
          "tasks": {
            "$ref": "#/components/schemas/taskengine_TaskDefinition"
          },
          "token_limit": {
            "description": "TokenLimit is the token limit for the context window (used during execution).",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "debug",
          "description",
          "tasks",
          "token_limit"
        ],
        "type": "object"
      },
      "taskengine_TaskDefinition": {
        "properties": {
          "compose": {
            "$ref": "#/components/schemas/taskengine_ComposeTask"
          },
          "description": {
            "description": "Description is a human-readable summary of what the task does.",
            "example": "Validates user input meets quality requirements",
            "type": "string"
          },
          "execute_config": {
            "$ref": "#/components/schemas/taskengine_LLMExecutionConfig"
          },
          "handler": {
            "description": "Handler determines how the LLM output (or hook) will be interpreted.",
            "example": "condition_key",
            "type": "string"
          },
          "hook": {
            "$ref": "#/components/schemas/taskengine_HookCall"
          },
          "id": {
            "description": "ID uniquely identifies the task within the chain.",
            "example": "validate_input",
            "type": "string"
          },
          "input_var": {
            "description": "InputVar is the name of the variable to use as input for the task.\nExample: \"input\" for the original input.\nEach task stores its output in a variable named with it's task id.",
            "example": "input",
            "type": "string"
          },
          "print": {
            "description": "Print optionally formats the output for display/logging.\nSupports template variables from previous task outputs.\nOptional for all task types except Hook where it's rarely used.\nExample: \"The score is: {{.previous_output}}\"",
            "example": "Validation result: {{.validate_input}}",
            "type": "string"
          },
          "prompt_template": {
            "description": "PromptTemplate is the text prompt sent to the LLM.\nIt's Required and only applicable for the raw_string type.\nSupports template variables from previous task outputs.\nExample: \"Rate the quality from 1-10: {{.input}}\"",
            "example": "Is this input valid? {{.input}}",
            "type": "string"
          },
          "retry_on_failure": {
            "description": "RetryOnFailure sets how many times to retry this task on failure.\nApplies to all task types including Hooks.\nDefault: 0 (no retries)",
            "example": 2,
            "type": "integer"
          },
          "system_instruction": {
            "description": "SystemInstruction provides additional instructions to the LLM, if applicable system level will be used.",
            "example": "You are a quality control assistant. Respond only with 'valid' or 'invalid'.",
            "type": "string"
          },
          "timeout": {
            "description": "Timeout optionally sets a timeout for task execution.\nFormat: \"10s\", \"2m\", \"1h\" etc.\nOptional for all task types.",
            "example": "30s",
            "type": "string"
          },
          "transition": {
            "$ref": "#/components/schemas/taskengine_TaskTransition"
          },
          "valid_conditions": {
            "additionalProperties": true,
            "description": "ValidConditions defines allowed values for ConditionKey tasks.\nRequired for ConditionKey tasks, ignored for all other types.\nExample: {\"yes\": true, \"no\": true} for a yes/no condition.",
            "example": "{\\\"valid\\\": true, \\\"invalid\\\": true}",
            "type": "object"
          }
        },
        "required": [
          "id",
          "description",
          "handler",
          "prompt_template",
          "transition"
        ],
        "type": "object"
      },
      "taskengine_TaskTransition": {
        "properties": {
          "branches": {
            "$ref": "#/components/schemas/taskengine_TransitionBranch"
          },
          "on_failure": {
            "description": "OnFailure is the task ID to jump to in case of failure.",
            "example": "error_handler",
            "type": "string"
          }
        },
        "required": [
          "on_failure",
          "branches"
        ],
        "type": "object"
      },
      "taskengine_TransitionBranch": {
        "properties": {
          "goto": {
            "description": "Goto specifies the target task ID if this branch is taken.\nLeave empty or use taskengine.TermEnd to end the chain.",
            "example": "positive_response",
            "type": "string"
          },
          "operator": {
            "description": "Operator defines how to compare the task's output to When.",
            "example": "equals",
            "type": "string"
          },
          "when": {
            "description": "When specifies the condition that must be met to follow this branch.\nFormat depends on the task type:\n- For condition_key: exact string match\n- For parse_number: numeric comparison (using Operator)",
            "example": "yes",
            "type": "string"
          }
        },
        "required": [
          "when",
          "goto"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "X-API-Key": {
        "in": "header",
        "name": "X-API-Key",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "contenox/runtime – LLM Backend Management API",
    "version": "v0.0.51-29-g527970d-dirty"
  },
  "openapi": "3.1.0",
  "paths": {
    "/backend-associations/{backendID}/pools": {
      "get": {
        "description": "Lists all pools that a specific backend belongs to.\nUseful for understanding which model sets a backend has access to.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all pools that a specific backend belongs to."
      },
      "parameters": [
        {
          "description": "The unique identifier of the backend.",
          "in": "path",
          "name": "backendID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/backend-associations/{poolID}/backends": {
      "get": {
        "description": "Lists all backends associated with a specific pool.\nReturns basic backend information without runtime state.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all backends associated with a specific pool."
      },
      "parameters": [
        {
          "description": "The unique identifier of the pool.",
          "in": "path",
          "name": "poolID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/backend-associations/{poolID}/backends/{backendID}": {
      "delete": {
        "description": "Removes a backend from a pool.\nAfter removal, the backend will no longer be eligible to process requests for models in this pool.\nRequests requiring models from this pool will no longer be routed to this backend.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a backend from a pool."
      },
      "parameters": [
        {
          "description": "The unique identifier of the pool.",
          "in": "path",
          "name": "poolID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The unique identifier of the backend to be assigned.",
          "in": "path",
          "name": "backendID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Associates a backend with a pool.\nAfter assignment, the backend can process requests for all models in the pool.\nThis enables request routing between the backend and models that share this pool.",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Associates a backend with a pool."
      }
    },
    "/backends": {
      "get": {
        "description": "Lists all configured backend connections with runtime status.\nNOTE: Only backends assigned to at least one pool will be used for request processing.\nBackends not assigned to any pool exist in the configuration but are completely ignored by the routing system.",
        "parameters": [
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_backendapi_backendSummary"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all configured backend connections with runtime status."
      },
      "post": {
        "description": "Creates a new backend connection to an LLM provider.\nBackends represent connections to LLM services (e.g., Ollama, OpenAI) that can host models.\nNote: Creating a backend will be provisioned on the next synchronization cycle.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Backend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Backend"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new backend connection to an LLM provider."
      }
    },
    "/backends/{id}": {
      "delete": {
        "description": "Removes a backend connection.\nThis does not deleteBackend models from the remote provider, only removes the connection.\nReturns a simple \"backend removed\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a backend connection."
      },
      "get": {
        "description": "Retrieves complete information for a specific backend",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backendapi_backendDetails"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves complete information for a specific backend"
      },
      "parameters": [
        {
          "description": "The unique identifier for the backend.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing backend configuration.\nThe ID from the URL path overrides any ID in the request body.\nNote: Updating a backend will be provisioned on the next synchronization cycle.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Backend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing backend configuration."
      }
    },
    "/defaultmodel": {
      "get": {
        "description": "Returns the default model configured during system initialization.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_DefaultModelResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Returns the default model configured during system initialization."
      }
    },
    "/embed": {
      "post": {
        "description": "Generates vector embeddings for text.\nUses the system's default embedding model configured at startup.\nRequests are routed ONLY to backends that have the default model available in any shared pool.\nIf pools are enabled, models and backends not assigned to any pool will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execapi_EmbedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_EmbedResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Generates vector embeddings for text."
      }
    },
    "/execute": {
      "post": {
        "description": "Runs the prompt through the default LLM.\nThis endpoint provides basic chat completion optimized for machine-to-machine (M2M) communication.\nRequests are routed ONLY to backends that have the default model available in any shared pool.\nIf pools are enabled, models and backends not assigned to any pool will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execservice_TaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execservice_SimpleExecutionResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Runs the prompt through the default LLM."
      }
    },
    "/hooks/remote": {
      "get": {
        "description": "Lists all configured remote hooks with pagination support.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all configured remote hooks with pagination support."
      },
      "post": {
        "description": "Creates a new remote hook configuration.\nRemote hooks allow task-chains to trigger external HTTP services during execution.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_RemoteHook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new remote hook configuration."
      }
    },
    "/hooks/remote/{id}": {
      "delete": {
        "description": "Deletes a remote hook configuration by ID.\nReturns a simple \"deleted\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Deletes a remote hook configuration by ID."
      },
      "get": {
        "description": "Retrieves a specific remote hook configuration by ID.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves a specific remote hook configuration by ID."
      },
      "parameters": [
        {
          "description": "The unique identifier for the remote hook.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing remote hook configuration.\nThe ID from the URL path overrides any ID in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_RemoteHook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_RemoteHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing remote hook configuration."
      }
    },
    "/internal/models": {
      "get": {
        "description": "Lists all registered models in internal format.\nThis endpoint returns full model details including timestamps and capabilities.\nIntended for administrative and debugging purposes.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all registered models in internal format."
      }
    },
    "/model-associations/{modelID}/pools": {
      "get": {
        "description": "Lists all pools that a specific model belongs to.\nUseful for understanding where a model is deployed across the system.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all pools that a specific model belongs to."
      },
      "parameters": [
        {
          "description": "The unique identifier of the model.",
          "in": "path",
          "name": "modelID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/model-associations/{poolID}/models": {
      "get": {
        "description": "Lists all models associated with a specific pool.\nReturns basic model information without backend-specific details.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all models associated with a specific pool."
      },
      "parameters": [
        {
          "description": "The unique identifier of the pool.",
          "in": "path",
          "name": "poolID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/model-associations/{poolID}/models/{modelID}": {
      "delete": {
        "description": "Removes a model from a pool.\nAfter removal, requests for this model will no longer be routed to backends in this pool.\nThis model can still be used with backends in other pools where it remains assigned.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a model from a pool."
      },
      "parameters": [
        {
          "description": "The unique identifier of the pool.",
          "in": "path",
          "name": "poolID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The unique identifier of the model to be assigned.",
          "in": "path",
          "name": "modelID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Associates a model with a pool.\nAfter assignment, requests for this model can be routed to any backend in the pool.\nThis enables request routing between the model and backends that share this pool.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Associates a model with a pool."
      }
    },
    "/models": {
      "get": {
        "description": "Lists all registered models in OpenAI-compatible format.\nReturns models as they would appear in OpenAI's /v1/models endpoint.\nNOTE: Only models assigned to at least one pool will be available for request processing.\nModels not assigned to any pool exist in the configuration but are completely ignored by the routing system.",
        "parameters": [
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backendapi_OpenAICompatibleModelList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all registered models in OpenAI-compatible format."
      },
      "post": {
        "description": "Declares a new model to the system.\nThe model must be available in a configured backend or will be queued for download.\nIMPORTANT: Models not assigned to any pool will NOT be available for request processing.\nIf pools are enabled, to make a model available to backends, it must be explicitly added to at least one pool.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Model"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Declares a new model to the system."
      }
    },
    "/models/{id}": {
      "delete": {
        "description": "Deletes a model from the system registry.\n- Does not remove the model from backend storage (requires separate backend operation)\n- Accepts 'purge=true' query parameter to also remove related downloads from queue",
        "parameters": [
          {
            "description": "If true, also removes the model from the download queue and cancels any in-progress downloads.",
            "in": "query",
            "name": "purge",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Deletes a model from the system registry."
      },
      "parameters": [
        {
          "description": "The unique identifier for the model.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing model registration.\nOnly mutable fields (like capabilities and context length) can be updated.\nThe model ID cannot be changed.\nReturns the updated model configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Model"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing model registration."
      }
    },
    "/pool-by-name/{name}": {
      "get": {
        "description": "Retrieves a pool by its human-readable name.\nUseful for configuration where ID might not be known but name is consistent.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves a pool by its human-readable name."
      },
      "parameters": [
        {
          "description": "The unique, human-readable name of the pool.",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/pool-by-purpose/{purpose}": {
      "get": {
        "description": "Lists pools filtered by purpose type with pagination support.\nPurpose types categorize pools (e.g., \"Internal Embeddings\", \"Internal Tasks\").\nAccepts 'cursor' (RFC3339Nano timestamp) and 'limit' parameters for pagination.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists pools filtered by purpose type with pagination support."
      },
      "parameters": [
        {
          "description": "The purpose category to filter pools by (e.g., 'embeddings').",
          "in": "path",
          "name": "purpose",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/pools": {
      "get": {
        "description": "Lists all resource pools in the system.\nReturns basic pool information without associated backends or models.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all resource pools in the system."
      },
      "post": {
        "description": "Creates a new resource pool for organizing backends and models.\nPool names must be unique within the system.\nPools allow grouping of backends and models for specific operational purposes (e.g., embeddings, tasks).\nWhen pools are configured in the system, request routing ONLY considers resources that share a pool.\n- Models not assigned to any pool will NOT be available for execution\n- Backends not assigned to any pool will NOT receive models or process requests\n- Resources must be explicitly associated with the same pool to work together\nThis is a fundamental operational requirement - resources outside pools are effectively invisible to the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Pool"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Pool"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Creates a new resource pool for organizing backends and models."
      }
    },
    "/pools/{id}": {
      "delete": {
        "description": "Removes a pool from the system.\nThis does not deletePool associated backends or models, only the pool relationship.\nReturns a simple \"deleted\" confirmation message on success.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a pool from the system."
      },
      "get": {
        "description": "Retrieves a specific pool by its unique ID.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves a specific pool by its unique ID."
      },
      "parameters": [
        {
          "description": "The unique identifier of the pool.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates an existing pool configuration.\nThe ID from the URL path overrides any ID in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/runtimetypes_Pool"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimetypes_Pool"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Updates an existing pool configuration."
      }
    },
    "/providers/configs": {
      "get": {
        "description": "Lists all configured external providers with pagination support.",
        "parameters": [
          {
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          },
          {
            "description": "An optional RFC3339Nano timestamp to fetch the next page of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_runtimestate_ProviderConfig"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists all configured external providers with pagination support."
      }
    },
    "/providers/{providerType}/config": {
      "delete": {
        "description": "Removes provider configuration from the system.\nAfter deletion, the provider will no longer be available for model execution.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes provider configuration from the system."
      },
      "get": {
        "description": "Retrieves configuration details for a specific external provider.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runtimestate_ProviderConfig"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves configuration details for a specific external provider."
      },
      "parameters": [
        {
          "description": "The type of the provider to delete (e.g., 'openai', 'gemini').",
          "in": "path",
          "name": "providerType",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/queue": {
      "get": {
        "description": "Retrieves the current model download queue state.\nReturns a list of models waiting to be downloaded.\nDownloading models is only supported for ollama backends.\nIf pools are enabled, models will only be downloaded to backends\nthat are associated with at least one pool.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_downloadservice_Job"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves the current model download queue state."
      }
    },
    "/queue/cancel": {
      "delete": {
        "description": "Cancels an in-progress model download.\nAccepts either:\n- 'url' query parameter to cancel a download on a specific backend\n- 'model' query parameter to cancel the model download across all backends\nExample: /queue/cancel?url=http://localhost:11434\n/queue/cancel?model=mistral:latest",
        "parameters": [
          {
            "description": "The base URL of a specific backend to cancel downloads on.",
            "in": "query",
            "name": "url",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The model name to cancel downloads for across all backends.",
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Cancels an in-progress model download."
      }
    },
    "/queue/inProgress": {
      "get": {
        "description": "Streams real-time download progress via Server-Sent Events (SSE).\nClients should handle 'data' events containing JSON status updates.\nConnection remains open until client disconnects or server closes.\nExample event format:\nevent: status\ndata: {\"status\":\"downloading\",\"digest\":\"sha256:abc123\",\"total\":1000000,\"completed\":250000,\"model\":\"mistral:latest\",\"baseUrl\":\"http://localhost:11434\"}",
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Server-Sent Events stream"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Streams real-time download progress via Server-Sent Events (SSE)."
      }
    },
    "/queue/{model}": {
      "delete": {
        "description": "Removes a model from the download queue.\nIf a model download is in progress or the download will be cancelled.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Removes a model from the download queue."
      },
      "parameters": [
        {
          "description": "The name of the model to remove from the queue (e.g., 'mistral:latest').",
          "in": "path",
          "name": "model",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/state": {
      "get": {
        "description": "Retrieves the current runtime state of all LLM backends.\nIncludes connection status, loaded models, and error information.\nNOTE: This shows the physical state of backends, but the routing system only considers\nbackends and models that are assigned to the same pool. Resources not in pools are ignored\nfor request processing even if they appear in this response.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_statetype_BackendRuntimeState"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieves the current runtime state of all LLM backends."
      }
    },
    "/supported": {
      "get": {
        "description": "Lists available task-chain hook types.\nReturns all registered external action types that can be used in task-chain hooks.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/array_string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Lists available task-chain hook types."
      }
    },
    "/tasks": {
      "post": {
        "description": "Executes dynamic task-chain workflows.\nTask-chains are state-machine workflows (DAGs) with conditional branches,\nexternal hooks, and captured execution state.\nRequests are routed ONLY to backends that have the requested model available in any shared pool.\nIf pools are enabled, models and backends not assigned to any pool will be completely ignored by the routing system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/execapi_taskExecutionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/execapi_taskExecutionResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Executes dynamic task-chain workflows."
      }
    }
  },
  "security": [
    {
      "X-API-Key": []
    }
  ]
}